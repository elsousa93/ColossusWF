{
    "className": "org.joget.apps.form.model.Form",
    "elements": [{
        "className": "org.joget.apps.form.model.Section",
        "elements": [{
            "className": "org.joget.apps.form.model.Column",
            "elements": [
                {
                    "className": "org.joget.apps.form.lib.HiddenField",
                    "properties": {
                        "id": "id_processo",
                        "useDefaultWhenEmpty": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_processo",
                        "label": "Número do Processo",
                        "maxlength": "",
                        "permissionHidden": "",
                        "permission_rules": {},
                        "placeholder": "",
                        "readonly": "true",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_agenda",
                        "label": "Número Workflow PL",
                        "maxlength": "",
                        "permissionHidden": "",
                        "placeholder": "",
                        "readonly": "true",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_wf_agenda",
                        "label": "Número Agenda",
                        "maxlength": "",
                        "permissionHidden": "",
                        "placeholder": "",
                        "readonly": "true",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "banco_fundo",
                        "id": "tipo_processo",
                        "label": "Tipo de processo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "cacheInterval": "",
                                "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormStoreBinder;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\n \r\npublic FormRowSet load(String[] values) {\r\n\r\n    FormRowSet rows = new FormRowSet();\r\n    \r\n    FormRow option = new FormRow();\r\n    option.setProperty(FormUtil.PROPERTY_VALUE, \"\");\r\n    option.setProperty(FormUtil.PROPERTY_LABEL, \"\");\r\n    rows.add(option);\r\n    \r\n    String banco = null;\r\n    if (values != null && values.length > 0) {\r\n        banco = \"%\" + values[0] + \"%\";\r\n    \r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        String origem_value = \"\";\r\n        String origem_label = \"\";\r\n        \r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con = ds.getConnection();\r\n                \r\n                \r\n                if(!con.isClosed()){\r\n                    \r\n                    //Verificar o utilizador atribuido e atualizar caso esteja errado\r\n                    String query=\"SELECT c_value, c_label FROM app_fd_listas_de_valores WHERE c_nome_campo = ? AND c_banco LIKE ? AND c_servico LIKE '%PROCU%';\";\r\n                    stmt = con.prepareStatement(query);\r\n                    stmt.setObject(1, \"tipo_processo\");\r\n                    stmt.setObject(2, banco);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    while(rs.next()){\r\n                        origem_value = rs.getString(1);\r\n                        origem_label = rs.getString(2);\r\n                        \r\n                        FormRow option = new FormRow();\r\n                        option.setProperty(FormUtil.PROPERTY_VALUE, origem_value);\r\n                        option.setProperty(FormUtil.PROPERTY_LABEL, origem_label);\r\n                        \r\n                        rows.add(option);\r\n                        \r\n                    }\r\n                }\r\n                \r\n        }catch(Exception e){\r\n            LogUtil.error(\"Importa processo - origem de processo\", e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(\"Importa processo - origem de processo\", e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return rows;\r\n}\r\n \r\n//call load method with injected variable\r\nreturn load(values);",
                                "useAjax": "true"
                            }
                        },
                        "permissionHidden": "",
                        "permission_rules": {},
                        "readonly": "true",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "",
                        "id": "banco_fundo",
                        "label": "Banco/Fundo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.FormOptionsBinder",
                            "properties": {
                                "addEmptyOption": "true",
                                "cacheInterval": "",
                                "emptyLabel": "",
                                "extraCondition": "c_nome_campo = 'nome_banco' AND e.customProperties.servico LIKE '%PROCU%'",
                                "formDefId": "adicionarOpcaoLV",
                                "groupingColumn": "",
                                "idColumn": "value",
                                "labelColumn": "label",
                                "useAjax": ""
                            }
                        },
                        "permissionHidden": "",
                        "permission_rules": {},
                        "readonly": "true",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.Radio",
                    "properties": {
                        "controlField": "",
                        "id": "originais",
                        "label": "Tem Originais?",
                        "options": [
                            {
                                "grouping": "",
                                "label": "Sim",
                                "value": "SIM"
                            },
                            {
                                "grouping": "",
                                "label": "Não",
                                "value": "NAO"
                            }
                        ],
                        "optionsBinder": {
                            "className": "",
                            "properties": {}
                        },
                        "permissionHidden": "",
                        "readonly": "true",
                        "readonlyLabel": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.DatePicker",
                    "properties": {
                        "allowManual": "",
                        "currentDateAs": "",
                        "dataFormat": "yyyy-MM-dd",
                        "datePickerType": "dateTime",
                        "endDateFieldId": "",
                        "format": "",
                        "format24hr": "true",
                        "id": "data_conclusao",
                        "label": "Data de Conclusão",
                        "permissionHidden": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "startDateFieldId": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": "",
                        "yearRange": "c-10:c+10"
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.CustomHTML",
                    "properties": {
                        "autoPopulate": "",
                        "id": "field8",
                        "label": "",
                        "value": "<script>\n    $(document).ready(function(){\n        var dataConclusao = \"#form.conclusao_procu.data_conclusao[{form.processos_procu.conclusao}]#\";\n        $(\"input[id*=data_conclusao]\").attr('readonly', 'readonly');\n        if(dataConclusao != ''){\n            $(\"input[id*=data_conclusao]\").datepicker(\"setDate\", new Date(dataConclusao) );\n        }\n        $(\"input[id*=data_conclusao]\").datepicker('disable');\n        $(\"a.close-icon\").css('display','none');\n        \n        //var nWfAgenda = \"#form.agendamento_procu.n_wf_agendamento[{form.processos_procu.agendamento}]#\";\n        //$(\"input[id*=n_wf_agenda]\").val(nWfAgenda);\n\n\n        //Remover botão de concluir apenas para Procuradoria\n        $(\"input#assignmentComplete\").remove();\n        \n    });\n    \n  \n    \n    \n<\/script>"
                    }
                }
            ],
            "properties": {"width": "100%"}
        }],
        "properties": {
            "comment": "",
            "id": "section1_1",
            "join": "",
            "label": "Resumo",
            "loadBinder": {
                "className": "",
                "properties": {}
            },
            "permission": {
                "className": "",
                "properties": {}
            },
            "permissionHidden": "",
            "permissionReadonly": "",
            "readonly": "",
            "readonlyLabel": "",
            "regex": "",
            "reverse": "",
            "storeBinder": {
                "className": "",
                "properties": {}
            },
            "visibilityControl": "",
            "visibilityValue": ""
        }
    }],
    "properties": {
        "description": "",
        "id": "resumoProcuradoria",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.commons.util.UuidGenerator;\r\nimport java.time.LocalDate;\r\nimport org.joget.workflow.model.service.*;\r\n\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport java.time.LocalDateTime; \r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.DayOfWeek;\r\nimport java.time.temporal.ChronoUnit;\r\n   \r\npublic FormRowSet load(Element element, String primaryKey, FormData formData) {\r\n    FormRowSet rows = new FormRowSet();\r\n    if (primaryKey != null && !primaryKey.isEmpty()) {\r\n\r\n        Connection con = null;\r\n        try {\r\n    // retrieve connection from the default datasource\r\n            DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n            con = ds.getConnection();\r\n            \r\n            String idProcesso = \"\";\r\n            // execute SQL query\r\n            if(!con.isClosed()) {\r\n                PreparedStatement stmt = con.prepareStatement(\"SELECT c_id_processo, c_n_processo, c_n_agenda, c_n_wf_agenda, c_tipo_processo, c_estado, c_banco_fundo, c_originais, c_data_conclusao from app_fd_detalhe_proce_procu where id=?\");\r\n                stmt.setObject(1, primaryKey);\r\n                ResultSet rs = stmt.executeQuery();\r\n                while (rs.next()) {\r\n                    FormRow row = new FormRow();\r\n                    \r\n                    idProcesso = (rs.getObject(\"c_id_processo\") != null)?rs.getObject(\"c_id_processo\").toString():\"\";\r\n                    row.setProperty(\"id_processo\", idProcesso);\r\n                    row.setProperty(\"n_processo\", (rs.getObject(\"c_n_processo\") != null)?rs.getObject(\"c_n_processo\").toString():\"\");\r\n                    row.setProperty(\"n_agenda\", (rs.getObject(\"c_n_agenda\") != null)?rs.getObject(\"c_n_agenda\").toString():\"\");\r\n                    row.setProperty(\"n_wf_agenda\", (rs.getObject(\"c_n_wf_agenda\") != null)?rs.getObject(\"c_n_wf_agenda\").toString():\"\");\r\n                    row.setProperty(\"tipo_processo\", (rs.getObject(\"c_tipo_processo\") != null)?rs.getObject(\"c_tipo_processo\").toString():\"\");\r\n                    row.setProperty(\"estado\", (rs.getObject(\"c_estado\") != null)?rs.getObject(\"c_estado\").toString():\"\");\r\n                    row.setProperty(\"banco_fundo\", (rs.getObject(\"c_banco_fundo\") != null)?rs.getObject(\"c_banco_fundo\").toString():\"\");\r\n                    row.setProperty(\"originais\", (rs.getObject(\"c_originais\") != null)?rs.getObject(\"c_originais\").toString():\"\");\r\n                    row.setProperty(\"data_conclusao\", (rs.getObject(\"c_data_conclusao\") != null)?rs.getObject(\"c_data_conclusao\").toString():\"\");\r\n                    rows.add(row);\r\n                    break;\r\n                }\r\n                \r\n                //Obter um Ato 'AGD' ou 'ACOM' com data de Outorga a começar\r\n                String queryGetAto = \"SELECT id, c_dataOutorga, c_horaOutorga FROM app_fd_atos WHERE c_id_processo = ? AND (c_status='ACOM' OR c_status = 'AGD' OR c_status = 'ADJ') AND CONCAT(c_dataOutorga, ' ',  c_horaOutorga, ':00') <= CURRENT_TIMESTAMP();\";\r\n                stmt = con.prepareStatement(queryGetAto);\r\n                stmt.setObject(1, idProcesso);\r\n               \r\n                String dataOutorga = \"\";\r\n                String horaOutorga = \"\";\r\n                rs = stmt.executeQuery();\r\n                \r\n                if(rs.next()){\r\n                    \r\n                    String idSubProcesso = \"#assignment.processId#\";\r\n                    dataOutorga = rs.getObject(\"c_dataOutorga\");\r\n                    horaOutorga = rs.getObject(\"c_horaOutorga\");\r\n                    \r\n                    if(dataOutorga!=null && !dataOutorga.isEmpty() && horaOutorga != null && !horaOutorga.isEmpty()){\r\n                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");\r\n                        DateTimeFormatter finalFormat = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n                        String dataInicioSLA = dataOutorga + \" \" + horaOutorga;\r\n                        LocalDateTime dateOutorga = LocalDateTime.parse(dataInicioSLA,formatter);\r\n                        dataInicioSLA= dateOutorga.format(finalFormat);\r\n                        \r\n                        \r\n                        \r\n                        //No modo consultar é necessário ir buscar o id do processo filho\r\n                        if(idSubProcesso.startsWith(\"#assignment.processId\")){\r\n                            String queryGetSubProcessId = \"SELECT id FROM shkprocesses WHERE ActivityRequesterProcessId = ?\";\r\n                            stmt = con.prepareStatement(queryGetAto);\r\n                            stmt.setObject(1, idProcesso);\r\n                            rs = stmt.executeQuery();\r\n                            if(rs.next()){\r\n                                idSubProcesso = rs.getObject(\"id\");\r\n                            }\r\n                        }\r\n    \r\n                        //Obter feriados para o cálculo do SLA\r\n                        Collection holidays = getHolidays(con);\r\n                        \r\n                        if(idSubProcesso!= null){\r\n                            String queryVerificarSLA = \"SELECT id, c_data_inicio, c_flag_sla_outorga FROM app_fd_sla_atividade WHERE c_id_processo = ? AND c_estado_atividade = 'Em curso';\";  \r\n                            stmt = con.prepareStatement(queryVerificarSLA);\r\n                            stmt.setObject(1, idSubProcesso);\r\n                            rs = stmt.executeQuery();\r\n                            String idSLA = \"\";\r\n                            String dataInicio = \"\";\r\n                            String flagSLAOutorga = \"\";\r\n                            if(rs.next()){\r\n                                \r\n                                LogUtil.info(\"IdAto\", \"SLA \" + idSLA);\r\n                                /*flagSLAOutorga=rs.getObject(\"c_flag_sla_outorga\");\r\n                                if(!flagSLAOutorga.equals(\"1\")){\r\n                                    idSLA = rs.getObject(\"id\");\r\n                                    dataInicio = rs.getObject(\"c_data_inicio\");\r\n                                    String slaDuration = calculateSLADuration(dataInicio, holidays);\r\n                                    //Fechar SLA 'Em curso'\r\n                                    String queryCloseSLA = \"UPDATE app_fd_sla_atividade SET c_estado_atividade = 'Fechada', c_data_conclusao=? , c_duracao = ? WHERE id = ?;\";\r\n                                    stmt = con.prepareStatement(queryCloseSLA);\r\n                                    stmt.setObject(1, \"#date.yyyy-MM-dd HH:mm#\");\r\n                                    stmt.setObject(2, slaDuration);\r\n                                    stmt.setObject(3, idSLA);\r\n                                    rs = stmt.executeQuery();\r\n                                \r\n                                \r\n                                    //Iniciar SLA na data de Outorga \r\n                                    iniciarSLA(con,idSubProcesso, dataInicioSLA, holidays, \"1\", \"NAO\"); //Para esta fase assumir que SLA sempre em D\r\n                                }*/\r\n                                \r\n                                //Não iniciar SLA caso já exista um \"Em curso\"\r\n                                \r\n                            }else{\r\n                                \r\n                                //Iniciar SLA na data de Outorga \r\n                                iniciarSLA(con,stmt,rs,idSubProcesso, dataInicioSLA, holidays, \"1\", \"NAO\"); //Para esta fase assumir que SLA sempre em D\r\n                                updateLastAto(con, stmt, rs, idProcesso);\r\n \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n        } catch(Exception e) {\r\n            LogUtil.error(\"Load Binder - Resumo Procuradoria\", e, \"Error loading user data in load binder\");\r\n        } finally {\r\n            //always close the connection after used\r\n            try {\r\n                if(con != null) {\r\n                    con.close();\r\n                }\r\n            } catch(SQLException e) {/* ignored */}\r\n        }\r\n    }\r\n    return rows;\r\n}\r\n\r\n\r\n\r\n\r\n//Calcular duração do SLA\r\npublic String calculateSLADuration(String dataInit, Collection holidays){\r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r\n    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\r\n    String result=\"\";\r\n    //if Data Init date format is not \"dd/MM/yyyy HH:mm\"\r\n    if(dataInit.charAt(2) != '/'){\r\n        //if Data Init date format is of the format \"yyyy-MM-dd HH:mm\"\r\n        if(dataInit.charAt(4) == '-' && dataInit.charAt(10) == ' ' && dataInit.charAt(13) == ':'){\r\n            dataInit =  dataInit.substring(8,10) + \"/\" + dataInit.substring(5,7) + \"/\" + dataInit.substring(0,4) + \" \" + dataInit.substring(11,16);\r\n        }\r\n    }\r\n\r\n    LocalDateTime dateInit = LocalDateTime.parse(dataInit, formatter);\r\n    LocalDateTime dateNow = LocalDateTime.parse(\"#date.dd/MM/yyyy HH:mm#\",formatter);\r\n    \r\n    LocalDate dateInitDays = dateInit.toLocalDate();\r\n    LocalDate dateNowDays = dateNow.toLocalDate();\r\n    long days = ChronoUnit.DAYS.between(dateInitDays, dateNowDays);\r\n    \r\n    int initHours = dateInit.getHour();\r\n    int nowHours = dateNow.getHour();\r\n    if(initHours > 12 && nowHours < 12){\r\n        days= days - 1;    \r\n    }else if(days>0 && initHours < 12 && nowHours >= 12){\r\n        days = days + 1;\r\n    }\r\n    \r\n    long workDays = days;\r\n    \r\n    while(days>0){\r\n        \r\n        if(holidays.contains(dateInit.format(dateFormatter))){\r\n            workDays-=1;\r\n            \r\n        }else{\r\n            String day = dateInit.getDayOfWeek().toString();\r\n        \r\n            switch(day) {\r\n                case \"SATURDAY\":{\r\n                    workDays-=1;\r\n                    break;\r\n                }\r\n                case \"SUNDAY\":{\r\n                    workDays-=1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        dateInit = dateInit.plusDays(1);\r\n  \r\n        days-=1;\r\n    }\r\n    \r\n    result = \"D\";\r\n    if(workDays>0){\r\n        result =result + \"+\" + workDays;\r\n    }\r\n    return result;\r\n}\r\n\r\n//Calcular data de fim para o SLA\r\npublic String calculateSLAD(String dataInicio, Collection feriados, String sla, String urgencia){\r\n    \r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\r\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter);  \r\n    LocalDateTime endDateTime = null;\r\n    String endDate = \"\";\r\n    Collection holidays = feriados;\r\n    \r\n    \r\n    \r\n    var hour = dateInit.getHour();\r\n    int slaNumber = Integer.parseInt(sla);\r\n\r\n    \r\n    if(urgencia.equals(\"SIM\")){\r\n        //Calcular SLA urgente\r\n        endDateTime = dateInit.plusHours(slaNumber);\r\n        //Passar dias não uteis\r\n        while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\r\n           endDateTime = endDateTime.plusDays(1);\r\n        }\r\n        \r\n        endDate = endDateTime.format(formatter);\r\n\r\n    }else{\r\n\r\n        //Calcular SLA não urgente\r\n\r\n            if(hour < 12){\r\n                endDateTime = dateInit.withHour(23).withMinute(59);   /**   HORAS UTEIS???   **/\r\n                while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\r\n                       endDateTime = endDateTime.plusDays(1);\r\n                }\r\n                \r\n                //Incrementar dias consoante o SLA\r\n                while(slaNumber > 1){\r\n                    endDateTime = endDateTime.plusDays(1);\r\n                    //Passar dias não uteis\r\n                    while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\r\n                       endDateTime = endDateTime.plusDays(1);\r\n                    }   \r\n                    slaNumber -= 1;\r\n                }\r\n                \r\n                  \r\n                \r\n            }else{\r\n                endDateTime = dateInit.plusDays(1).withHour(12).withMinute(0);\r\n                while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\r\n                       endDateTime = endDateTime.plusDays(1);\r\n                }\r\n                \r\n                //Incrementar dias consoante o SLA\r\n                while(slaNumber > 1){\r\n                    endDateTime = endDateTime.plusDays(1);\r\n                    //Passar dias não uteis\r\n                    while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\r\n                       endDateTime = endDateTime.plusDays(1);\r\n                    }\r\n                    slaNumber -= 1;\r\n                }\r\n            }\r\n            \r\n        endDate = endDateTime.format(formatter);\r\n    }\r\n    \r\n    return endDate;\r\n}\r\n\r\n//Obter lista de feriados\r\npublic Collection getHolidays(Connection con){\r\n    Collection holidays = new ArrayList(); \r\n    try{\r\n        String queryGetHolidays = \"SELECT * FROM app_fd_lista_feriados;\";\r\n        PreparedStatement stmt = con.prepareStatement(queryGetHolidays);\r\n        ResultSet rs = stmt.executeQuery();\r\n        while(rs.next()){\r\n            holidays.add(rs.getObject(\"c_data\"));\r\n        }\r\n    } catch(Exception e) {\r\n        LogUtil.error(\"Load Binder - Resumo Procuradoria \", e, \"Error getting holidays\");\r\n    } \r\n    \r\n    return holidays;\r\n}\r\n\r\npublic void iniciarSLA(Connection con, PreparedStatement stmt,  ResultSet rs, String idSubProcesso, String dataInicioSLA, Collection holidays, String sla, String urgenciaSLA){\r\n    //Obter detalhes da tarefa\r\n    String queryGetAssignment = \"SELECT name FROM shkprocesses WHERE id=?;\";\r\n    String queryGetUserAssign = \"SELECT resourceid FROM shkassignmentstable WHERE activityprocessid =?\";\r\n    String nomeAtividade = \"\";\r\n    String utilizador = \"\";\r\n    stmt = con.prepareStatement(queryGetAssignment);\r\n    stmt.setObject(1, idSubProcesso);\r\n    rs = stmt.executeQuery();\r\n    \r\n    if(rs.next()){\r\n        nomeAtividade= rs.getObject(\"name\").toString();\r\n    }\r\n    \r\n    stmt = con.prepareStatement(queryGetUserAssign);\r\n    stmt.setObject(1, idSubProcesso);\r\n    rs = stmt.executeQuery();\r\n    \r\n    if(rs.next()){\r\n        utilizador= rs.getObject(\"resourceid\").toString();\r\n    }\r\n    \r\n    String queryCreateSLA = \"INSERT INTO app_fd_sla_atividade (id, dateCreated, dateModified, createdBy,createdByName ,modifiedBy, modifiedByName, c_data_inicio, c_data_fim, c_nome_atividade, c_id_processo, c_utilizador_atribuido, c_estado_atividade, c_duracao, c_flag_sla_outorga) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);\";\r\n    stmt = con.prepareStatement(queryCreateSLA);\r\n    \r\n    var idSLA = UuidGenerator.getInstance().getUuid();\r\n    var dateNow =\"#date.yyyy-MM-dd HH:mm#\";\r\n    //var dateNow = \"\";\r\n    var currentUsername = \"#currentUser.username#\";\r\n    var currentNameUser = \"#currentUser.firstName#\" + \"#currentUser.lastName#\";\r\n    \r\n    String dataFim = calculateSLAD(dataInicioSLA, holidays, sla, urgenciaSLA); \r\n    String duracao = calculateSLADuration(dataInicioSLA, holidays);\r\n   \r\n    var estadoAtividade = \"Em curso\";\r\n    stmt.setObject(1, idSLA);\r\n    stmt.setObject(2, dateNow);\r\n    stmt.setObject(3, dateNow);\r\n    stmt.setObject(4, currentUsername);\r\n    stmt.setObject(5, currentNameUser);\r\n    stmt.setObject(6, currentUsername);\r\n    stmt.setObject(7, currentNameUser);\r\n    stmt.setObject(8, dataInicioSLA); //data inicio\r\n    stmt.setObject(9, dataFim); //data fim           \r\n    stmt.setObject(10, nomeAtividade);\r\n    stmt.setObject(11, idSubProcesso);\r\n    stmt.setObject(12, utilizador);\r\n    stmt.setObject(13, estadoAtividade);\r\n    stmt.setObject(14, duracao);\r\n    stmt.setObject(15, \"1\");\r\n    \r\n    rs = stmt.executeQuery();\r\n\r\n}\r\n\r\n//Verificar de o dia é fim de semana\r\npublic boolean isWeekend(LocalDateTime dt) {\r\n    String dayOfWeek = dt.getDayOfWeek().toString();\r\n    switch(dayOfWeek) {\r\n        case \"SATURDAY\":{\r\n            return true;\r\n        }\r\n        case \"SUNDAY\":{\r\n            return true;\r\n        }\r\n        default:{\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n//Obter configurações do SLA por operativa (por terminar)\r\npublic String getSLAConfig(){\r\n    //Obter configurações de SLA consoante a operativa e urgencia\r\n    String paramOperativa = operativaAnterior;\r\n    String queryGetSLAConfig = \"SELECT * FROM app_fd_valores_sla WHERE c_nome like ? \";\r\n    if(Urgencia.equals(\"SIM\")){\r\n        queryGetSLAConfig += \"AND c_nome like '%URGENTE'\";\r\n        paramOperativa += \"%\";\r\n    }\r\n    stmt = con.prepareStatement(queryGetSLAConfig);\r\n    stmt.setObject(1, paramOperativa);\r\n    rs = stmt.executeQuery();\r\n    String sla = \"\"; \r\n    if(rs.next()){\r\n        sla = rs.getObject(\"c_sla\");\r\n    }\r\n    return sla;\r\n}\r\n\r\n\r\n//Atualizar o estado do último ato para Outorga Iniciada\r\npublic void updateLastAto(Connection con, PreparedStatement stmt, ResultSet rs, String idProcesso){\r\n    \r\n    String queryGetLastAto = \"SELECT id FROM app_fd_atos WHERE c_id_processo = ? AND dateCreated = (SELECT MAX(dateCreated) FROM app_fd_atos a2 WHERE a2.c_id_processo = ?);\";\r\n    stmt = con.prepareStatement(queryGetLastAto);\r\n    stmt.setObject(1, idProcesso);\r\n    stmt.setObject(2, idProcesso);\r\n    rs = stmt.executeQuery();\r\n    String idAto = \"\";\r\n    if(rs.next()){\r\n        idAto = rs.getObject(\"id\");\r\n        String queryUpdateAto = \"UPDATE app_fd_atos SET c_status = 'OUTI' WHERE id = ?\";\r\n        stmt = con.prepareStatement(queryUpdateAto);\r\n        stmt.setObject(1, idAto);\r\n        stmt.executeQuery();\r\n    }\r\n}\r\n\r\n            \r\n   \r\n//call load method with injected variable\r\nreturn load(element, primaryKey, formData);",
                "useAjax": ""
            }
        },
        "name": "Procuradoria - Resumo Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "tableName": "detalhe_proce_procu"
    }
}