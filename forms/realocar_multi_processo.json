{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.apps.form.lib.Grid",
                    "properties": {
                        "errorMessage": "Invalid number of rows",
                        "id": "realocar_multi_processos",
                        "label": "",
                        "loadBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "autoHandleFiles": "",
                                "autoHandleWorkflowVariable": "true",
                                "cacheInterval": "",
                                "script": "import java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.text.DecimalFormat;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.form.model.*;\r\nimport org.joget.apps.form.service.*;\r\nimport java.sql.*;\r\nimport org.apache.commons.collections.SequencedHashMap;\r\nimport java.util.*;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\npublic FormRowSet getgridData() {\r\n    FormRowSet fgrid = new FormRowSet();\r\n    fgrid.setMultiRow(true);\r\n    Connection con = null;\r\n    PreparedStatement stmt = null;\r\n    ResultSet rs = null;\r\n    try{\r\n            DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n            con = ds.getConnection();\r\n            \r\n            if(!con.isClosed()){\r\n                \r\n                String multiActivityIds = \"#requestParam.aid#\";\r\n                String[] aid = multiActivityIds.split(\";\");\r\n                \r\n                //LogUtil.info(\"Activities Ids \" , \"AAA \" + multiActivityIds);\r\n                for(int i=0; i<aid.length; i++){\r\n                    \r\n                String queryGetSubProcessId=\"SELECT processId FROM shkactivities WHERE id=?\";\r\n                stmt = con.prepareStatement(queryGetSubProcessId);\r\n                stmt.setObject(1, aid[i]);\r\n                rs = stmt.executeQuery();\r\n                \r\n                    if(rs.next()){\r\n                        String subProcessId = rs.getObject(\"processId\").toString();\r\n                        if(subProcessId != null || !subProcessId.isEmpty()){\r\n                            \r\n                            String queryGetProcessId = \"SELECT ActivityRequesterProcessId, sass.ResourceId AS 'assignee' FROM shkprocesses sp JOIN SHKActivities sact ON sact.ProcessId = sp.Id JOIN SHKAssignmentsTable sass ON sact.Id = sass.ActivityId WHERE sp.id=?  ORDER BY created DESC ;\";\r\n                            stmt = con.prepareStatement(queryGetProcessId);\r\n                            stmt.setObject(1, subProcessId);\r\n                            rs = stmt.executeQuery();\r\n                            \r\n                            if(rs.next()){\r\n                                String processId = rs.getObject(\"ActivityRequesterProcessId\").toString();\r\n                                String assignee = rs.getObject(\"assignee\").toString();\r\n                                \r\n                                if(processId != null || !processId.isEmpty()){\r\n                                    String queryGetProcessDetail = \"SELECT c_n_wf_pl as 'NWFPL', c_n_wf_banco as 'NWFB' FROM app_fd_detalhe_processo WHERE c_id_processo = ?\";\r\n                                    stmt = con.prepareStatement(queryGetProcessDetail);\r\n                                    stmt.setObject(1, processId);\r\n                                    rs = stmt.executeQuery();\r\n                                    //LogUtil.info(\"*ProcessId \" , \"AAA \" + processId);\r\n                                    if(rs.next()){\r\n                                        FormRow gr1 = new FormRow();\r\n                                        gr1.put(\"gridColumn1\", rs.getObject(\"NWFPL\").toString());\r\n                                        gr1.put(\"gridColumn2\", rs.getObject(\"NWFB\").toString());\r\n                                        gr1.put(\"gridColumn3\", assignee);\r\n                                        fgrid.add(gr1);\r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n     \r\n                        }\r\n       \r\n                    }\r\n                }\r\n            }\r\n  \r\n    }catch(Exception e){\r\n            LogUtil.error(appDef.toString(), e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n\r\n\r\n\r\nreturn fgrid;\r\n}\r\nreturn getgridData();",
                                "useAjax": ""
                            }
                        },
                        "options": [
                            {
                                "label": "Número Workflow PL",
                                "value": "gridColumn1"
                            },
                            {
                                "label": "Número Workflow Banco",
                                "value": "gridColumn2"
                            },
                            {
                                "label": "Utilizador Atual",
                                "value": "gridColumn3"
                            }
                        ],
                        "permissionHidden": "",
                        "readonly": "true",
                        "storeBinder": {
                            "className": "",
                            "properties": {}
                        },
                        "validateMaxRow": "",
                        "validateMinRow": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        }
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section1",
                "join": "",
                "label": "Processos",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "",
                        "id": "user",
                        "label": "Realocar para",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.plugin.enterprise.UserOptionsBinder",
                            "properties": {
                                "addEmptyOption": "",
                                "cacheInterval": "",
                                "deptId": "",
                                "emptyLabel": "",
                                "groupId": "",
                                "grouping": "dept",
                                "optionLabel": "",
                                "orgId": "PL",
                                "useAjax": ""
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section2",
                "join": "",
                "label": "Realocar",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                    "properties": {
                        "autoHandleFiles": "",
                        "autoHandleWorkflowVariable": "true",
                        "cacheInterval": "",
                        "script": "return null;",
                        "useAjax": ""
                    }
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "realocar_multi_processo",
        "loadBinder": {
            "className": "",
            "properties": {}
        },
        "name": "Realocar Multi Processos",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "org.joget.apps.app.lib.BeanShellTool",
            "properties": {"script": "\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.apps.app.model.AppDefinition;\nimport javax.servlet.http.HttpServletRequest;\nimport org.joget.commons.util.LogUtil;\n\npublic Object execute(AppDefinition appDef, HttpServletRequest request) {\n    WorkflowManager wm = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n    WorkflowUserManager wum = (WorkflowUserManager) AppUtil.getApplicationContext().getBean(\"workflowUserManager\");\n    \n    //get the values from the \n    String multiActivityIds = \"#requestParam.aid#\";\n    String[] aid = multiActivityIds.split(\";\");\n    \n    String replaceUser = \"#requestParam.replaceUser#\";\n    String multiProcessos = \"#form.detalhe_processo.realocar_multi_processos#\";\n    \n    LogUtil.info(\"MULTI PROCESSOS\", \"AAA\" + multiProcessos);\n    ogUtil.info(\"ID PROCESSO\", \"AAA\" +\"#form.detalhe_processo.id_processo#\");\n    \n    /*\n    for(int i=0; i<aid.length; i++){\n\n        LogUtil.info(\"AID\",\"activityId ------>\" + aid[i]);\n        LogUtil.info(\"ReplaceUser\",\"replaceUser ------>\"+replaceUser);\n        LogUtil.info(\"USERNAME\",\"username ------>\"+username);\n        \n        //getCurrentThreadUser() Method used by system to get current thread user\n        String currentUser = wum.getCurrentThreadUser();\n        wum.setCurrentThreadUser(replaceUser);\n        wum.setCurrentThreadUser(currentUser);\n        \n        //Reassigns the assignment from a user (replaceUser) to another user (username)\n        wm.assignmentReassign(\"\", \"\", aid[i], username, replaceUser);\n        \n        //set workflow variable \"approver\" to the new user as well\n        wm.activityVariable(aid[i], \"approver\", username);\n    }*/\n    \n    return null;\n}\n\n//call execute method with injected variable\nreturn execute(appDef, request);\n\n"}
        },
        "postProcessorRunOn": "both",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "tableName": "detalhe_processo"
    }
}