{
    "className": "org.joget.apps.form.model.Form",
    "elements": [{
        "className": "org.joget.apps.form.model.Section",
        "elements": [{
            "className": "org.joget.apps.form.model.Column",
            "elements": [
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "",
                        "id": "banco_fundo",
                        "label": "Banco/Fundo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.FormOptionsBinder",
                            "properties": {
                                "addEmptyOption": "true",
                                "cacheInterval": "",
                                "emptyLabel": "",
                                "extraCondition": "c_nome_campo = 'nome_banco' AND e.customProperties.servico LIKE '%PROCU%'",
                                "formDefId": "adicionarOpcaoLV",
                                "groupingColumn": "",
                                "idColumn": "value",
                                "labelColumn": "label",
                                "useAjax": ""
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.DefaultValidator",
                            "properties": {
                                "mandatory": "true",
                                "message": "#i18n.mandatorymsg#",
                                "type": ""
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "banco_fundo",
                        "id": "tipo_processo",
                        "label": "Tipo de processo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "cacheInterval": "",
                                "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormStoreBinder;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\n \r\npublic FormRowSet load(String[] values) {\r\n \r\n    \r\n    FormRowSet rows = new FormRowSet();\r\n    \r\n    FormRow option = new FormRow();\r\n    option.setProperty(FormUtil.PROPERTY_VALUE, \"\");\r\n    option.setProperty(FormUtil.PROPERTY_LABEL, \"\");\r\n    rows.add(option);\r\n    \r\n    String banco = null;\r\n    if (values != null && values.length > 0) {\r\n        banco = \"%\" + values[0] + \"%\";\r\n    \r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        String origem_value = \"\";\r\n        String origem_label = \"\";\r\n        \r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con = ds.getConnection();\r\n                \r\n                \r\n                if(!con.isClosed()){\r\n\r\n                    //Verificar o utilizador atribuido e atualizar caso esteja errado\r\n                    String query=\"SELECT c_value, c_label FROM app_fd_listas_de_valores WHERE c_nome_campo = ? AND c_banco LIKE ? AND c_servico LIKE '%PROCU%';\";\r\n                    stmt = con.prepareStatement(query);\r\n                    stmt.setObject(1, \"tipo_processo\");\r\n                    stmt.setObject(2, banco);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    while(rs.next()){\r\n                        origem_value = rs.getString(1);\r\n                        origem_label = rs.getString(2);\r\n                        \r\n                        FormRow option = new FormRow();\r\n                        option.setProperty(FormUtil.PROPERTY_VALUE, origem_value);\r\n                        option.setProperty(FormUtil.PROPERTY_LABEL, origem_label);\r\n                        \r\n                        rows.add(option);\r\n                        \r\n                    }\r\n                }\r\n                \r\n        }catch(Exception e){\r\n            LogUtil.error(\"Importa processo - origem de processo\", e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(\"Importa processo - origem de processo\", e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return rows;\r\n}\r\n \r\n//call load method with injected variable\r\nreturn load(values);",
                                "useAjax": "true"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_processo",
                        "label": "Número Processo",
                        "maxlength": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.BeanShellValidator",
                            "properties": {
                                "decoration": "*",
                                "script": "import java.util.Arrays;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.Form;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\n  \r\npublic boolean validate(Element element, FormData formData, String[] values){\r\n    Connection con = null;\r\n    PreparedStatement stmt = null;\r\n    ResultSet rs = null;\r\n    \r\n    boolean result = true;\r\n\r\n    //Set fieldId of the field to compare - UPDATE HERE\r\n    String fieldId = \"nome_banco\";\r\n    \r\n    //Get element value\r\n    Form form = FormUtil.findRootForm(element);\r\n    Element field = FormUtil.findElement(fieldId, form, formData);\r\n    String fieldValue = FormUtil.getElementPropertyValue(field, formData);\r\n    \r\n    \r\n   \r\n    //If element is not filled give error message\r\n    if (values == null || values[0].isEmpty()){\r\n        String id = FormUtil.getElementParameterName(element);\r\n        formData.addFormError(id, \"Campo obrigatório\");\r\n        return false;\r\n    }\r\n    \r\n    String numeroProcesso = values[0];\r\n    \r\n    try{\r\n    DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    con = ds.getConnection();\r\n    \r\n    if(!con.isClosed()){\r\n        String queryProcessExists = \"SELECT p.id FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu dp ON dp.id = p.c_detalhe_processo WHERE dp.c_n_processo = ?\";\r\n        stmt = con.prepareStatement(queryProcessExists);\r\n        stmt.setObject(1, numeroProcesso);\r\n        rs = stmt.executeQuery();\r\n        //caso exista um processo com o numeroProcesso igual\r\n        if(rs.next()){\r\n            String processId = rs.getObject(\"p.id\");\r\n            String id = FormUtil.getElementParameterName(element);\r\n           \r\n            formData.addFormError(id, \"O processo já existe\");\r\n            return false;\r\n\r\n            /*\r\n            String queryGetProcess = \"select subpro.id, subpro.PDefName, ass.activityID, ass.ResourceID  from shkprocesses pro left join shkprocesses subpro on pro.id = subpro.activityRequesterProcessID left join shkassignmentstable ass on subpro.id = ass.ActivityProcessID where pro.id = ? and activityID is not null\";\r\n            stmt = con.prepareStatement(queryGetProcess);\r\n            stmt.setObject(1, processId);\r\n            rs = stmt.executeQuery();\r\n            if(!rs.next()){\r\n                formData.addFormError(id, \"O processo já existe e foi concluido\");\r\n                return false;\r\n            }\r\n            */\r\n            \r\n        }\r\n            \r\n        \r\n    }\r\n            \r\n            \r\n    }catch(Exception e){\r\n        LogUtil.error(appDef.toString(), e, \"Error getting info from DB\");\r\n    }finally{\r\n        try{\r\n            if(rs != null){\r\n                rs.close();\r\n            }\r\n            if(stmt != null){\r\n                stmt.close();\r\n            }\r\n            if(con != null && !con.isClosed()) {\r\n                con.close();\r\n            }\r\n        }catch(Exception e){\r\n            LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\r\n        }\r\n    }\r\n        \r\n        \r\n    \r\n    \r\n\r\n    return result;\r\n\r\n}\r\n\r\n//call validate method with injected variable\r\nreturn validate(element, formData, values);"
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.DatePicker",
                    "properties": {
                        "allowManual": "",
                        "currentDateAs": "",
                        "dataFormat": "yyyy-MM-dd",
                        "datePickerType": "",
                        "endDateFieldId": "",
                        "format": "",
                        "id": "data_entrada",
                        "label": "Data de Entrada",
                        "permission_rules": {},
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "startDateFieldId": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": "",
                        "yearRange": "c-10:c+10"
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.CustomHTML",
                    "properties": {
                        "autoPopulate": "",
                        "id": "field5",
                        "label": "",
                        "value": "<script>\n    $(document).ready(function(){\n        $(\"input#submit\").val(\"GUARDAR\");\n        \n        \n        \n    //Flag para reencaminhar para o processo\n    //window.sessionStorage.setItem(\"previousPage\", \"importar\");\n    });\n    \n     \n<\/script>"
                    }
                }
            ],
            "properties": {"width": "100%"}
        }],
        "properties": {
            "comment": "",
            "id": "section1",
            "join": "",
            "label": "Criar Processo",
            "loadBinder": {
                "className": "",
                "properties": {}
            },
            "permission": {
                "className": "",
                "properties": {}
            },
            "permissionReadonly": "",
            "readonly": "",
            "readonlyLabel": "",
            "regex": "",
            "reverse": "",
            "storeBinder": {
                "className": "",
                "properties": {}
            },
            "visibilityControl": "",
            "visibilityValue": ""
        }
    }],
    "properties": {
        "description": "",
        "id": "criarProcessoProcuradoria",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Procuradoria - Criar/Importar Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.workflow.model.WorkflowAssignment;\nimport org.joget.workflow.model.WorkflowProcess;\nimport org.joget.workflow.model.WorkflowProcessResult;\nimport org.joget.workflow.model.WorkflowActivity;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.commons.util.UuidGenerator;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.workflow.model.service.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport java.time.LocalDateTime; \nimport java.time.format.DateTimeFormatter;\n\n\n\n\npublic FormRowSet storeData(Element element, FormRowSet rows, FormData formData) {\n \n    AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n    WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n    AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n        \n    try{\n        \n        //check for empty data\n        if (rows == null || rows.isEmpty()) {\n            return rows;\n        }\n        \n        //get value from form to set workflow variables\n        FormRow originalRow = rows.get(0);\n        String banco_fundo = originalRow.getProperty(\"banco_fundo\");\n        String numeroProcesso = originalRow.getProperty(\"n_processo\");\n        String tipoProcesso = originalRow.getProperty(\"tipo_processo\");\n        String dataEntrada = originalRow.getProperty(\"data_entrada\");\n\n        if (dataEntrada == null && dataEntrada.length() == 0){ //se data esta preenchida\n            dataEntrada = \"#date.yyyy-MM-dd HH:mm#\";\n        }\n        \n        /**Check if process exists**/\n       \n        Connection con = null;\n        PreparedStatement stmt = null;\n        ResultSet rs = null;\n        boolean processExists = false;\n        String processId = \"\";\n        \n        DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n        con = ds.getConnection();\n        \n        if(!con.isClosed()){\n            String queryGetProcessId = \"SELECT p.id FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu dp ON dp.id = p.c_detalhe_processo WHERE dp.n_processo = ? \";\n            stmt = con.prepareStatement(queryGetProcessId);\n            stmt.setObject(1,numeroProcesso);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                processId = rs.getObject(\"p.id\");\n                \n                processExists=true;\n                \n            }\n        }\n\n    //Se o processo não existir\n    if(!processExists){\n        //start process with variables\n        Map variables = new HashMap();\n        \n        //get process\n        WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"Procuradoria\");\n        //start process\n        WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\n        //get process id\n        processId = result.getProcess().getInstanceId();\n        \n        \n        FormRowSet multipagedForms = new FormRowSet();\n        FormRow formPrimaryKey = new FormRow();\n        \n        //definition of the fields of table processos where to store each generated primary key\n        String[] fieldIds = {\"detalhe_processo\",\"comunicacoes\",\"agendamento\", \"documentos\"};\n        //definition of the formIds that correspond to the pages of the multipage form\n        String[] formIds = {\"detalheProcessoProcuradoria\", \"comunicacoes\", \"agendamentoProcuradoria\", \"ficheirosProcuradoria\"};\n        \n        for(int i = 0; i < fieldIds.length; i++){\n            String foreignKey = UuidGenerator.getInstance().getUuid();\n            formPrimaryKey.setProperty(fieldIds[i], foreignKey);\n            \n            FormRowSet newRows = new FormRowSet();\n            FormRow newRow = new FormRow();\n            if(fieldIds[i].equals(\"detalhe_processo\") ){\n                newRow.put(\"banco_fundo\", banco_fundo);\n                newRow.put(\"n_processo\", numeroProcesso);\n                newRow.put(\"tipo_processo\", tipoProcesso);\n                newRow.put(\"estado\", \"NOV\");\n                newRow.put(\"data_primeira_entrada\", dataEntrada);\n                newRow.put(\"data_entrada\", dataEntrada);\n                \n            }else if(fieldIds[i].equals(\"comunicacoes\")){\n                \n            }else if(fieldIds[i].equals(\"agendamento\") ){\n                    \n            }else if(fieldIds[i].equals(\"documentos\") ){\n                    \n            }\n            newRow.setProperty(\"id_processo\", processId);\n            newRows.add(newRow);\n            \n            storeToOtherFormDataTable(appDef, element, newRows, formData, formIds[i], foreignKey);\n        }\n         formPrimaryKey.setProperty(\"servico\", \"PROCU\");\n        multipagedForms.add(formPrimaryKey);\n\n        \n        storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"procuradoria\", processId);\n    \n        //Se o processo já existir\n    }else{\n        \n        FormRowSet newRows = new FormRowSet();\n        FormRow newRow = new FormRow();\n        \n        newRow.put(\"data_entrada\", dataEntrada);\n        newRows.add(newRow);\n        \n        String detalheProcessoPK = \"#form.processos_procu.detalhe_processo[\"+ processId + \"]#\";\n        detalheProcessoPK = AppUtil.processHashVariable(detalheProcessoPK,null,null,null);\n        \n        storeToOtherFormDataTable(appDef, element, newRows, formData, \"detalheProcessoProcuradoria\", detalheProcessoPK);\n        \n    }\n        \n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\n    }\n    return rows;           \n}\n\npublic void storeToOtherFormDataTable(AppDefinition appDef, Element element, FormRowSet rows, FormData formData, String formId, String id) {\n    try{\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n        FormRowSet storedInfo = appService.storeFormData(appDef.getId(), appDef.getVersion().toString(), formId, rows, id);\n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error storing data\");\n    }\n    \n}\n\n\n//call execute method with injected variable\nreturn storeData(element, rows, formData);",
                "useAjax": ""
            }
        },
        "tableName": "processos_temp"
    }
}