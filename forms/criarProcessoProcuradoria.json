{
    "className": "org.joget.apps.form.model.Form",
    "elements": [{
        "className": "org.joget.apps.form.model.Section",
        "elements": [{
            "className": "org.joget.apps.form.model.Column",
            "elements": [
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "",
                        "id": "banco_fundo",
                        "label": "Banco/Fundo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.FormOptionsBinder",
                            "properties": {
                                "addEmptyOption": "true",
                                "cacheInterval": "",
                                "emptyLabel": "",
                                "extraCondition": "c_nome_campo = 'nome_banco' AND e.customProperties.servico LIKE '%PROCU%'",
                                "formDefId": "adicionarOpcaoLV",
                                "groupingColumn": "",
                                "idColumn": "value",
                                "labelColumn": "label",
                                "useAjax": ""
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.DefaultValidator",
                            "properties": {
                                "mandatory": "true",
                                "message": "#i18n.mandatorymsg#",
                                "type": ""
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "banco_fundo",
                        "id": "tipo_processo",
                        "label": "Tipo de processo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "cacheInterval": "",
                                "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormStoreBinder;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\n \r\npublic FormRowSet load(String[] values) {\r\n \r\n    \r\n    FormRowSet rows = new FormRowSet();\r\n    \r\n    FormRow option = new FormRow();\r\n    option.setProperty(FormUtil.PROPERTY_VALUE, \"\");\r\n    option.setProperty(FormUtil.PROPERTY_LABEL, \"\");\r\n    rows.add(option);\r\n    \r\n    String banco = null;\r\n    if (values != null && values.length > 0) {\r\n        banco = \"%\" + values[0] + \"%\";\r\n    \r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        String origem_value = \"\";\r\n        String origem_label = \"\";\r\n        \r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con = ds.getConnection();\r\n                \r\n                \r\n                if(!con.isClosed()){\r\n\r\n                    //Verificar o utilizador atribuido e atualizar caso esteja errado\r\n                    String query=\"SELECT c_value, c_label FROM app_fd_listas_de_valores WHERE c_nome_campo = ? AND c_banco LIKE ? AND c_servico LIKE '%PROCU%';\";\r\n                    stmt = con.prepareStatement(query);\r\n                    stmt.setObject(1, \"tipo_processo\");\r\n                    stmt.setObject(2, banco);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    while(rs.next()){\r\n                        origem_value = rs.getString(1);\r\n                        origem_label = rs.getString(2);\r\n                        \r\n                        FormRow option = new FormRow();\r\n                        option.setProperty(FormUtil.PROPERTY_VALUE, origem_value);\r\n                        option.setProperty(FormUtil.PROPERTY_LABEL, origem_label);\r\n                        \r\n                        rows.add(option);\r\n                        \r\n                    }\r\n                }\r\n                \r\n        }catch(Exception e){\r\n            LogUtil.error(\"Importa processo - origem de processo\", e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(\"Importa processo - origem de processo\", e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return rows;\r\n}\r\n \r\n//call load method with injected variable\r\nreturn load(values);",
                                "useAjax": "true"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_processo",
                        "label": "Número Processo",
                        "maxlength": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.BeanShellValidator",
                            "properties": {
                                "decoration": "*",
                                "script": "import java.util.Arrays;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.Form;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport java.util.regex.Pattern;\r\nimport java.util.regex.Matcher;\r\n\r\n  \r\npublic boolean validate(Element element, FormData formData, String[] values){\r\n    Connection con = null;\r\n    PreparedStatement stmt = null;\r\n    ResultSet rs = null;\r\n    \r\n    boolean result = true;\r\n\r\n   String id = FormUtil.getElementParameterName(element);\r\n    //If element is not filled give error message\r\n    if (values == null || values[0].isEmpty()){\r\n        formData.addFormError(id, \"Campo obrigatório\");\r\n        return false;\r\n    }\r\n    \r\n    String numeroProcesso = values[0];\r\n\r\n    Form form = FormUtil.findRootForm(element);\r\n    Element bancoFundoElement = FormUtil.findElement(\"banco_fundo\", form, formData);\r\n    String[] bancoFundoValues = FormUtil.getElementPropertyValues(bancoFundoElement, formData);\r\n    \r\n    Element tipoProcessoElement = FormUtil.findElement(\"tipo_processo\", form, formData);\r\n    String[] tipoProcessoValues = FormUtil.getElementPropertyValues(tipoProcessoElement, formData);\r\n    \r\n    if(bancoFundoValues.length>0 && !bancoFundoValues[0].isEmpty() && tipoProcessoValues.length>0 && !tipoProcessoValues[0].isEmpty()){\r\n        String bancoFundo = bancoFundoValues[0];\r\n        //LogUtil.info(\"Banco\", \"AAA \"+ bancoFundo);\r\n        \r\n        String tipoProcesso = tipoProcessoValues[0];\r\n        //LogUtil.info(\"Banco\", \"AAA \"+ tipoProcesso);\r\n        \r\n         //Construção de número Agenda\r\n        String numeroAgenda = \"\";\r\n        if(bancoFundo.equals(\"BCP\")){\r\n           if(tipoProcesso.equals(\"DIST\")){\r\n               numeroAgenda = \"PDIST\" + numeroProcesso;\r\n               \r\n           }else if(tipoProcesso.equals(\"MUT\")){\r\n               numeroAgenda = \"PMH\" + numeroProcesso;\r\n               \r\n           }else if(tipoProcesso.equals(\"LEAS\")){\r\n               numeroAgenda = \"PMHL\" + numeroProcesso;\r\n               \r\n           }else if(tipoProcesso.equals(\"ISV\")){\r\n               numeroAgenda = \"ISVp\"; //Falta NIF cliente\r\n               \r\n           }else if(tipoProcesso.equals(\"CVJ\")){\r\n               numeroAgenda = \"CVJnp\"; //Falta NIF cliente\r\n               \r\n           }else if(tipoProcesso.equals(\"DAC\")){\r\n               numeroAgenda = \"PDAC\"; //Falta NIF cliente\r\n               \r\n           }\r\n        }else if(bancoFundo.equals(\"NVB\")){\r\n            if(tipoProcesso.equals(\"DIST\")){\r\n                numeroAgenda = \"NBDIST\" + numeroProcesso;\r\n            }\r\n        }else if(bancoFundo.equals(\"WHS\")){\r\n            \r\n            String[] nProc = numeroProcesso.split(\"-\");\r\n            if(nProc.length > 2){\r\n                if(tipoProcesso.equals(\"DIST\")){\r\n                    numeroAgenda = \"WSDIST\" + nProc[2];\r\n                    \r\n                }else if(tipoProcesso.equals(\"CEV\")){\r\n                   numeroAgenda = \"WSREO\" + nProc[2];\r\n                   \r\n               }else if(tipoProcesso.equals(\"DAC\")){\r\n                   numeroAgenda = \"WSDAC\" + nProc[2];\r\n                   \r\n               }else if(tipoProcesso.equals(\"VNP\")){\r\n                   numeroAgenda = \"WSVNP\" + nProc[2];\r\n                   \r\n               }\r\n            }else{\r\n                formData.addFormError(id, \"O número de processo tem que conter pelo menos 2 hífens\");\r\n                return false;\r\n            }\r\n   \r\n        }else if(bancoFundo.equals(\"HPG\")){\r\n            String[] nProc = numeroProcesso.split(\"-\");\r\n            if(tipoProcesso.equals(\"DIST\")){\r\n                numeroAgenda = \"HIPODIST\" + nProc[1];\r\n                \r\n            }else if(tipoProcesso.equals(\"CEV\")){\r\n                numeroAgenda = \"HIPOREO\" + nProc[1];\r\n               \r\n            }else if(tipoProcesso.equals(\"VNP\")){\r\n                numeroAgenda = \"HIPOVNP\" + nProc[1];\r\n               \r\n            }else if(tipoProcesso.equals(\"RAAC\")){\r\n                numeroAgenda = \"HIPOREC\" + nProc[1];\r\n               \r\n            }\r\n            \r\n        }else if(bancoFundo.equals(\"NOR\")){\r\n            \r\n            numeroAgenda = \"NORF\"; //Falta número sequencial da Agenda\r\n            \r\n        }else if(bancoFundo.equals(\"DHM\")){\r\n\r\n            if(tipoProcesso.equals(\"CPCV\")){\r\n                numeroAgenda = \"DHMPROCREC\"; //Falta NIF do cliente\r\n                \r\n            }else if(tipoProcesso.equals(\"CEV\")){\r\n                numeroAgenda = \"DDHMPROCDCV\" ; //Falta NIF do cliente\r\n               \r\n            }\r\n\r\n        }else if(bancoFundo.equals(\"BNI\")){\r\n            \r\n            if(tipoProcesso.equals(\"MUT\")){\r\n                numeroAgenda = \"BNICP\" + numeroProcesso; \r\n                \r\n            }else if(tipoProcesso.equals(\"DIST\")){\r\n                numeroAgenda = \"BNID\" + numeroProcesso;\r\n               \r\n            }\r\n            \r\n        }else if(bancoFundo.equals(\"MTG\")){\r\n            \r\n            if(tipoProcesso.equals(\"MUT\")){\r\n                numeroAgenda = \"MGPCVM\" + numeroProcesso.replaceAll(\"-\", \"\").replaceAll(\".\", \"\"); \r\n                \r\n            }else if(tipoProcesso.equals(\"CEV\")){\r\n                \r\n              \r\n                //Retirar tudo à frente de \"lt, lote ou lotes\"\r\n                Pattern pattern = Pattern.compile(\"lt|lotes|lote\", Pattern.CASE_INSENSITIVE);\r\n                Matcher matcher = pattern.matcher(numeroProcesso);\r\n                if(matcher.find()){\r\n                    int index = matcher.start();\r\n                    numeroProcesso = numeroProcesso.substring(0,index).trim();   \r\n                }\r\n                //Remover tudo o que não são digitos\r\n                numeroProcesso = numeroProcesso.replaceAll(\"[^\\\\d.]|\\\\.\", \"\");\r\n                \r\n                numeroAgenda = \"MGPCVM\" + numeroProcesso.trim();\r\n                \r\n            }else if(tipoProcesso.equals(\"ISV\")){\r\n                numeroAgenda = \"MGISVP\"; // FALTA NIF do Cliente\r\n                \r\n            }else if(tipoProcesso.equals(\"CVJ\")){\r\n                numeroAgenda = \"MGCVJNP\"; // FALTA NIF do Cliente\r\n                \r\n            }else if(tipoProcesso.equals(\"DAC\")){\r\n                numeroAgenda = \"MGDACP\"; // FALTA NIF do Cliente\r\n                \r\n            }else if(tipoProcesso.equals(\"DIST\")){\r\n                numeroAgenda = \"MGPD\"; // NÚMERO SEQUENCIAL DA AGENDA\r\n                \r\n            }else if(tipoProcesso.equals(\"DIST\")){\r\n                numeroAgenda = \"MGPD\"; // NÚMERO SEQUENCIAL DA AGENDA\r\n                \r\n            }\r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        try{\r\n        DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n        con = ds.getConnection();\r\n        \r\n        if(!con.isClosed()){\r\n            String queryProcessExists = \"SELECT p.id FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu dp ON dp.id = p.c_detalhe_processo WHERE dp.c_n_agenda= ?\";\r\n            stmt = con.prepareStatement(queryProcessExists);\r\n            stmt.setObject(1, numeroAgenda);\r\n            rs = stmt.executeQuery();\r\n            //caso exista um processo com o numeroProcesso igual\r\n            if(rs.next()){\r\n                String processId = rs.getObject(\"p.id\");\r\n                String id = FormUtil.getElementParameterName(element);\r\n                formData.addFormError(id, \"O processo já existe\");\r\n                return false;\r\n    \r\n                /*\r\n                String queryGetProcess = \"select subpro.id, subpro.PDefName, ass.activityID, ass.ResourceID  from shkprocesses pro left join shkprocesses subpro on pro.id = subpro.activityRequesterProcessID left join shkassignmentstable ass on subpro.id = ass.ActivityProcessID where pro.id = ? and activityID is not null\";\r\n                stmt = con.prepareStatement(queryGetProcess);\r\n                stmt.setObject(1, processId);\r\n                rs = stmt.executeQuery();\r\n                if(!rs.next()){\r\n                    formData.addFormError(id, \"O processo já existe e foi concluido\");\r\n                    return false;\r\n                }\r\n                */\r\n                \r\n            }\r\n                \r\n            \r\n        }\r\n                \r\n                \r\n        }catch(Exception e){\r\n            LogUtil.error(appDef.toString(), e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                    rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\r\n            }\r\n        }\r\n    }else{\r\n        result = false;\r\n    }\r\n\r\n    return result;\r\n\r\n}\r\n\r\n//call validate method with injected variable\r\nreturn validate(element, formData, values);"
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.DatePicker",
                    "properties": {
                        "allowManual": "true",
                        "currentDateAs": "",
                        "dataFormat": "",
                        "datePickerType": "dateTime",
                        "endDateFieldId": "",
                        "format": "",
                        "format24hr": "true",
                        "id": "data_entrada",
                        "label": "Data de Entrada",
                        "permission_rules": {},
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "startDateFieldId": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.BeanShellValidator",
                            "properties": {
                                "decoration": "*",
                                "script": "import java.util.Arrays;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.Form;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic boolean validate(Element element, FormData formData, String[] values){\r\n    boolean result = true;\r\n    \r\n    String id = FormUtil.getElementParameterName(element);\r\n    //If element is not filled give error message\r\n    if (values == null || values[0].isEmpty()){\r\n        formData.addFormError(id, \"Campo obrigatório\");\r\n        return false;\r\n    }\r\n    \r\n    String data = values[0];\r\n    LogUtil.info(\"DAta \", \"AAA \" + data);\r\n    \r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n    LocalDateTime dateTime = LocalDateTime.parse(data, formatter);\r\n    LocalDateTime now = LocalDateTime.now();\r\n    \r\n    if(dateTime.isAfter(now)){\r\n        result = false;\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n\r\n//call validate method with injected variable\r\nreturn validate(element, formData, values);"
                            }
                        },
                        "value": "",
                        "workflowVariable": "",
                        "yearRange": "c-10:c"
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.CustomHTML",
                    "properties": {
                        "autoPopulate": "",
                        "id": "field5",
                        "label": "",
                        "value": "<script>\n    $(document).ready(function(){\n        $(\"input#submit\").val(\"GUARDAR\");\n        \n        \n        \n    //Flag para reencaminhar para o processo\n    window.sessionStorage.setItem(\"previousPage\", \"importar\");\n    window.sessionStorage.setItem(\"nwf\", $(\"input#n_processo\").val());\n    window.sessionStorage.setItem(\"servico\", \"procu\");\n    });\n    \n     \n<\/script>"
                    }
                }
            ],
            "properties": {"width": "100%"}
        }],
        "properties": {
            "comment": "",
            "id": "section1",
            "join": "",
            "label": "Criar Processo",
            "loadBinder": {
                "className": "",
                "properties": {}
            },
            "permission": {
                "className": "",
                "properties": {}
            },
            "permissionReadonly": "",
            "readonly": "",
            "readonlyLabel": "",
            "regex": "",
            "reverse": "",
            "storeBinder": {
                "className": "",
                "properties": {}
            },
            "visibilityControl": "",
            "visibilityValue": ""
        }
    }],
    "properties": {
        "description": "",
        "id": "criarProcessoProcuradoria",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Procuradoria - Criar/Importar Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.workflow.model.WorkflowAssignment;\nimport org.joget.workflow.model.WorkflowProcess;\nimport org.joget.workflow.model.WorkflowProcessResult;\nimport org.joget.workflow.model.WorkflowActivity;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.commons.util.UuidGenerator;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.workflow.model.service.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport java.time.LocalDateTime; \nimport java.time.format.DateTimeFormatter;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\n\npublic String calculateSLAD(String dataInicio, Collection feriados){\n    \n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter);  \n    LocalDateTime endDateTime = null;\n    String endDate = \"\";\n    Collection holidays = feriados;\n    \n    \n    var hour = dateInit.getHour();\n\n    if(hour < 12){\n        endDateTime = dateInit.withHour(23).withMinute(59);\n        while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\n           endDateTime = endDateTime.plusDays(1);\n        }\n        endDate = endDateTime.format(formatter);\n    }else{\n        endDateTime = dateInit.plusDays(1).withHour(12).withMinute(0);\n        while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\n           endDateTime = endDateTime.plusDays(1);\n        }\n        endDate = endDateTime.format(formatter);\n    }\n    \n    return endDate;\n}\n\npublic String durationSLA(String dataInicio){\n    var duracao=\"\";\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter); \n    var hour = dateInit.getHour();\n    \n    if(hour < 12){\n        duracao=\"D\";\n    }else{\n        duracao=\"D+1\";\n    }\n    \n    return duracao;\n}\n\npublic boolean isWeekend(LocalDateTime dt) {\n    String dayOfWeek = dt.getDayOfWeek().toString();\n\n    switch(dayOfWeek) {\n        case \"SATURDAY\":{\n            return true;\n        }\n        case \"SUNDAY\":{\n            return true;\n        }\n        default:{\n            return false;\n        }\n    }\n}\n\npublic FormRowSet storeData(Element element, FormRowSet rows, FormData formData) {\n    \n    AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n    WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n    AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n    Connection con = null;\n    PreparedStatement stmt = null;\n    ResultSet rs = null;\n    try{\n        \n        //check for empty data\n        if (rows == null || rows.isEmpty()) {\n            return rows;\n        }\n        \n        //get value from form to set workflow variables\n        FormRow originalRow = rows.get(0);\n        String banco_fundo = originalRow.getProperty(\"banco_fundo\");\n        String numeroProcesso = originalRow.getProperty(\"n_processo\");\n        String tipoProcesso = originalRow.getProperty(\"tipo_processo\");\n        String dataEntrada = originalRow.getProperty(\"data_entrada\");\n        \n        if (dataEntrada != null && dataEntrada.length() > 0){ //se data esta preenchida\n            dataEntrada = dataEntrada.substring(6,10) + \"-\" + dataEntrada.substring(3,5) + \"-\" + dataEntrada.substring(0,2) + \" \" + dataEntrada.substring(11,16);\n        }else{\n            dataEntrada =\"\";// \"#date.yyyy-MM-dd HH:mm#\"; Caso a data não seja preenchida\n        }\n        \n        int flagNumeroSequencial = 0;\n        //Construção de número Agenda\n        String numeroAgenda = \"\";\n        if(banco_fundo.equals(\"BCP\")){\n           if(tipoProcesso.equals(\"DIST\")){\n               numeroAgenda = \"PDIST\" + numeroProcesso;\n               \n           }else if(tipoProcesso.equals(\"MUT\")){\n               numeroAgenda = \"PMH\" + numeroProcesso;\n               \n           }else if(tipoProcesso.equals(\"LEAS\")){\n               numeroAgenda = \"PMHL\" + numeroProcesso;\n               \n           }else if(tipoProcesso.equals(\"ISV\")){\n               flagNumeroSequencial=1;\n               numeroAgenda = \"PLISVp\"; //Falta NIF cliente\n               \n           }else if(tipoProcesso.equals(\"CVJ\")){\n               flagNumeroSequencial=1;\n               numeroAgenda = \"PLCVJnp\"; //Falta NIF cliente\n               \n           }else if(tipoProcesso.equals(\"DAC\")){\n               flagNumeroSequencial=1;\n               numeroAgenda = \"PLPDAC\"; //Falta NIF cliente\n               \n           }\n        }else if(banco_fundo.equals(\"NVB\")){\n            if(tipoProcesso.equals(\"DIST\")){\n                numeroAgenda = \"NBDIST\" + numeroProcesso;\n            }\n        }else if(banco_fundo.equals(\"WHS\")){\n            \n            String[] nProc = numeroProcesso.split(\"-\");\n            if(nProc.length > 2){\n                if(tipoProcesso.equals(\"DIST\")){\n                    numeroAgenda = \"WSDIST\" + nProc[2];\n                    \n                }else if(tipoProcesso.equals(\"CEV\")){\n                   numeroAgenda = \"WSREO\" + nProc[2];\n                   \n               }else if(tipoProcesso.equals(\"DAC\")){\n                   numeroAgenda = \"WSDAC\" + nProc[2];\n                   \n               }else if(tipoProcesso.equals(\"VNP\")){\n                   numeroAgenda = \"WSVNP\" + nProc[2];\n                   \n               }\n            }\n   \n        }else if(banco_fundo.equals(\"HPG\")){\n            String[] nProc = numeroProcesso.split(\"-\");\n            if(tipoProcesso.equals(\"DIST\")){\n                numeroAgenda = \"HIPODIST\" + nProc[1];\n                \n            }else if(tipoProcesso.equals(\"CEV\")){\n                numeroAgenda = \"HIPOREO\" + nProc[1];\n               \n            }else if(tipoProcesso.equals(\"VNP\")){\n                numeroAgenda = \"HIPOVNP\" + nProc[1];\n               \n            }else if(tipoProcesso.equals(\"RAAC\")){\n                numeroAgenda = \"HIPOREC\" + nProc[1];\n               \n            }\n            \n        }else if(banco_fundo.equals(\"NOR\")){\n            flagNumeroSequencial=1;\n            numeroAgenda = \"PLNORF\"; //Falta número sequencial da Agenda\n            \n        }else if(banco_fundo.equals(\"DHM\")){\n\n            if(tipoProcesso.equals(\"CPCV\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLDHMPROCREC\"; //Falta NIF do cliente\n                \n            }else if(tipoProcesso.equals(\"CEV\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLDDHMPROCDCV\" ; //Falta NIF do cliente\n               \n            }\n\n        }else if(banco_fundo.equals(\"BNI\")){\n            \n            if(tipoProcesso.equals(\"MUT\")){\n                numeroAgenda = \"BNICP\" + numeroProcesso; \n                \n            }else if(tipoProcesso.equals(\"DIST\")){\n                numeroAgenda = \"BNID\" + numeroProcesso;\n               \n            }\n            \n        }else if(banco_fundo.equals(\"MTG\")){\n            \n            if(tipoProcesso.equals(\"MUT\")){\n                numeroAgenda = \"MGPCVM\" + numeroProcesso.replaceAll(\"-\", \"\").replaceAll(\".\", \"\"); \n                \n            }else if(tipoProcesso.equals(\"CEV\")){\n                \n              \n                //Retirar tudo à frente de \"lt, lote ou lotes\"\n                Pattern pattern = Pattern.compile(\"lt|lotes|lote\", Pattern.CASE_INSENSITIVE);\n                Matcher matcher = pattern.matcher(numeroProcesso);\n                if(matcher.find()){\n                    int index = matcher.start();\n                    numeroProcesso = numeroProcesso.substring(0,index).trim();   \n                }\n                //Remover tudo o que não são digitos\n                numeroProcesso = numeroProcesso.replaceAll(\"[^\\\\d.]|\\\\.\", \"\");\n                \n               \n                numeroAgenda = \"MGPCVM\" + numeroProcesso.trim();\n                \n            }else if(tipoProcesso.equals(\"ISV\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLMGISVP\"; // FALTA NIF do Cliente\n                \n            }else if(tipoProcesso.equals(\"CVJ\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLMGCVJNP\"; // FALTA NIF do Cliente\n                \n            }else if(tipoProcesso.equals(\"DAC\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLMGDACP\"; // FALTA NIF do Cliente\n                \n            }else if(tipoProcesso.equals(\"DIST\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLMGPD\"; // NÚMERO SEQUENCIAL DA AGENDA\n                \n            }else if(tipoProcesso.equals(\"DIST\")){\n                flagNumeroSequencial=1;\n                numeroAgenda = \"PLMGPD\"; // NÚMERO SEQUENCIAL DA AGENDA\n                \n            }\n            \n            \n            \n            \n        }\n        \n        /**Check if process exists**/\n        boolean processExists = false;\n        String processId = \"\";\n        \n        DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n        con = ds.getConnection();\n        \n        \n        \n        \n        \n        \n        if(!con.isClosed()){\n            \n            //Obter número sequencial\n            if(flagNumeroSequencial == 1){\n                String queryGetMaxNumber = \"SELECT Max(replace(c_n_agenda, ?, '')) as num_max FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu where c_n_agenda like ? and length(c_n_agenda) > 10\";\n                stmt = con.prepareStatement(queryGetMaxNumber);\n                stmt.setObject(1,numeroAgenda);\n                stmt.setObject(2,numeroAgenda+'%');\n                rs = stmt.executeQuery();\n                if(rs.next()){\n                    String numero = rs.getObject(\"num_max\");\n                    if(numero != null){\n                        numero = \"000000000\" + String.valueOf(Integer.valueOf(numero) + 1);\n                        numero = numero.substring(numero.length() - 10);\n                        numeroAgenda = numeroAgenda + numero;\n                    }else{\n                         numeroAgenda = numeroAgenda + \"0000000000\";\n                    }\n                        \n                }else{\n                     numeroAgenda = numeroAgenda + \"0000000000\";\n                }\n            }      \n            \n            \n            \n            \n            \n            String queryGetProcessId = \"SELECT p.id FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu dp ON dp.id = p.c_detalhe_processo WHERE dp.c_n_agenda = ? \";\n            stmt = con.prepareStatement(queryGetProcessId);\n            stmt.setObject(1,numeroAgenda);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                processId = rs.getObject(\"p.id\");\n                \n                processExists=true;\n                \n            }\n        }\n\n    //Se o processo não existir\n    if(!processExists){\n        //start process with variables\n        Map variables = new HashMap();\n        variables.put(\"user_procuradoria\", \"#currentUser.username#\");\n        //get process\n        WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"Procuradoria\");\n        //start process\n        WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\n        //get process id\n        processId = result.getProcess().getInstanceId();\n        \n        \n        FormRowSet multipagedForms = new FormRowSet();\n        FormRow formPrimaryKey = new FormRow();\n        \n        //definition of the fields of table processos where to store each generated primary key\n        String[] fieldIds = {\"detalhe_processo\",\"comunicacoes\",\"agendamento\", \"documentos\", \"conclusao\"};\n        //definition of the formIds that correspond to the pages of the multipage form\n        String[] formIds = {\"detalheProcessoProcuradoria\", \"comunicacoes\", \"agendamentoProcuradoria\", \"ficheirosProcuradoria\", \"conclusaoProcuradoria\"};\n        \n        for(int i = 0; i < fieldIds.length; i++){\n            String foreignKey = UuidGenerator.getInstance().getUuid();\n            formPrimaryKey.setProperty(fieldIds[i], foreignKey);\n            \n            FormRowSet newRows = new FormRowSet();\n            FormRow newRow = new FormRow();\n            if(fieldIds[i].equals(\"detalhe_processo\") ){\n                newRow.put(\"banco_fundo\", banco_fundo);\n                newRow.put(\"n_processo\", numeroProcesso);\n                newRow.put(\"tipo_processo\", tipoProcesso);\n                newRow.put(\"estado\", \"NOV\");\n                newRow.put(\"data_primeira_entrada\", dataEntrada);\n                newRow.put(\"data_entrada\", dataEntrada);\n                newRow.put(\"n_agenda\", numeroAgenda);\n                \n            }else if(fieldIds[i].equals(\"comunicacoes\")){\n                \n            }else if(fieldIds[i].equals(\"agendamento\") ){\n                    \n            }else if(fieldIds[i].equals(\"documentos\") ){\n                    \n            }\n            newRow.setProperty(\"id_processo\", processId);\n            newRows.add(newRow);\n            \n            storeToOtherFormDataTable(appDef, element, newRows, formData, formIds[i], foreignKey);\n        }\n        formPrimaryKey.setProperty(\"servico\", \"PROCU\");\n        multipagedForms.add(formPrimaryKey);\n\n        \n        storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"procuradoria\", processId);\n        \n        \n        \n        \n        //Iniciar SLA\n        \n        String queryGetAssignment = \"SELECT id, name, resourcerequesterid  FROM shkprocesses WHERE activityrequesterprocessid =? AND id like '%procuradoria%' order by created desc;\";\n        String queryGetUserAssign = \"SELECT resourceid FROM shkassignmentstable WHERE activityprocessid =?\";\n        String idSubProcesso= \"\";\n        String nomeAtividade = \"\";\n        String utilizador = \"\";\n        Connection con2=null;\n        Collection holidays = new ArrayList(); \n        \n        \n        stmt = con.prepareStatement(queryGetAssignment);\n        stmt.setObject(1, processId);\n        rs = stmt.executeQuery();\n        if(rs.next()){\n            idSubProcesso = rs.getObject(\"id\").toString();\n            nomeAtividade= rs.getObject(\"name\").toString();\n        }\n        \n        stmt = con.prepareStatement(queryGetUserAssign);\n        stmt.setObject(1, idSubProcesso);\n        rs = stmt.executeQuery();\n        if(rs.next()){\n            utilizador= rs.getObject(\"resourceid\").toString();\n        }\n        \n                \n        var idSLA = UuidGenerator.getInstance().getUuid();\n        var estadoAtividade = \"Em curso\";\n        //alteracao devido a mudanca do formato da data recebida\n        var dataInicio = dataEntrada; \n        String dataFim = \"\";\n        String duracao = \"\";\n        //LogUtil.info(\"Data Inicio\" , \"AAAAA \" + dataEntrada);\n        if(dataInicio != \"\"){\n        dataFim = calculateSLAD(dataInicio, holidays);\n        duracao =  durationSLA(dataInicio);\n        }\n        //LogUtil.info(\"Data Fim\" , \"AAAAA \" + dataFim);\n        \n        //LogUtil.info(\"Duração\" , \"AAAAA \" + duracao);\n        \n        FormRowSet rowSetSLA = new FormRowSet();\n        FormRow rowsSLA = new FormRow();\n        rowsSLA.put(\"id_processo\", idSubProcesso);\n        rowsSLA.put(\"nome_atividade\", nomeAtividade);\n        rowsSLA.put(\"data_inicio\", dataInicio);\n        rowsSLA.put(\"data_fim\", dataFim);\n        rowsSLA.put(\"utilizador_atribuido\", utilizador);\n        rowsSLA.put(\"estado_atividade\", estadoAtividade);\n        rowsSLA.put(\"duracao\", duracao);\n        rowSetSLA.add(rowsSLA);\n        storeToOtherFormDataTable(appDef, element, rowSetSLA, formData, \"slaAtividade\", idSLA);\n        \n    \n        //Se o processo já existir\n    }else{\n        \n        FormRowSet newRows = new FormRowSet();\n        FormRow newRow = new FormRow();\n        \n        newRow.put(\"data_entrada\", dataEntrada);\n        newRows.add(newRow);\n        \n        String detalheProcessoPK = \"#form.processos_procu.detalhe_processo[\"+ processId + \"]#\";\n        detalheProcessoPK = AppUtil.processHashVariable(detalheProcessoPK,null,null,null);\n        \n        storeToOtherFormDataTable(appDef, element, newRows, formData, \"detalheProcessoProcuradoria\", detalheProcessoPK);\n        \n    }\n        \n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\n    }finally{\n        try{\n            if(rs != null){\n                rs.close();\n            }\n            if(stmt != null){\n                stmt.close();\n            }\n            if(con != null && !con.isClosed()) {\n                con.close();\n            }\n        }catch(Exception e){\n            LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\n        }\n \n    }\n    \n    \n    return rows;           \n}\n\npublic void storeToOtherFormDataTable(AppDefinition appDef, Element element, FormRowSet rows, FormData formData, String formId, String id) {\n    try{\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n        FormRowSet storedInfo = appService.storeFormData(appDef.getId(), appDef.getVersion().toString(), formId, rows, id);\n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error storing data\");\n    }\n    \n}\n\n\n//call execute method with injected variable\nreturn storeData(element, rows, formData);",
                "useAjax": ""
            }
        },
        "tableName": "processos_temp"
    }
}