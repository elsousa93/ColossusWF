{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "n_wf_banco",
                            "label": "Número Workflow Banco",
                            "maxlength": "",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.DefaultValidator",
                                "properties": {
                                    "mandatory": "",
                                    "message": "#i18n.mandatorymsg#",
                                    "type": ""
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "complex_processo",
                            "label": "Complexidade do Processo",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "true",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'complexidade_processo'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "fase_processo",
                            "label": "Fase do Processo",
                            "multiple": "",
                            "options": [{
                                "grouping": "",
                                "label": "Contratação",
                                "value": "CNT"
                            }],
                            "optionsBinder": {
                                "className": "",
                                "properties": {}
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.DatePicker",
                        "properties": {
                            "allowManual": "",
                            "datePickerType": "utcdateTime",
                            "endDateFieldId": "",
                            "format24hr": "",
                            "id": "data_entrada",
                            "label": "Data de Entrada",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "showUserTimeZone": "",
                            "startDateFieldId": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {
                    "customWidth": "100%",
                    "horizontal": "",
                    "label": "",
                    "width": "100%"
                }
            }],
            "properties": {
                "comment": "TODO:\n- Verificar se um processo sem nada preenchido é criado\n- Adicionar campos em falta\n- Fazer lógica para importar campos para tabelas diferentes",
                "id": "section1",
                "join": "",
                "label": "Detalhe de Processo",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "nome_banco",
                            "label": "Nome do Banco",
                            "multiple": "",
                            "options": [
                                {
                                    "grouping": "",
                                    "label": "",
                                    "value": ""
                                },
                                {
                                    "grouping": "",
                                    "label": "BCP",
                                    "value": "BCP"
                                },
                                {
                                    "grouping": "",
                                    "label": "Novo Banco",
                                    "value": "NB"
                                }
                            ],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "true",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'nome_banco'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "tipo_banco",
                            "label": "Tipo de Banco",
                            "multiple": "",
                            "options": [
                                {
                                    "grouping": "",
                                    "label": "Novo Banco",
                                    "value": "nb"
                                },
                                {
                                    "grouping": "",
                                    "label": "Novo Banco Açores",
                                    "value": "nba"
                                }
                            ],
                            "optionsBinder": {
                                "className": "",
                                "properties": {}
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.BeanShellValidator",
                                "properties": {
                                    "decoration": "",
                                    "script": "import org.joget.apps.form.service.FormUtil;\r\nimport java.util.Arrays;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.Form;\r\nimport org.joget.apps.form.model.FormData;\r\n\r\n  \r\npublic boolean validate(Element element, FormData formData, String[] fileUploadValues) {\r\n    boolean result = true;\r\n     \r\n    //get dropdown select box value\r\n    String field1Id = \"nome_banco\";\r\n    Form form = FormUtil.findRootForm(element);\r\n    Element field1 = FormUtil.findElement(field1Id, form, formData);\r\n    \r\n     //get dropdown select box value\r\n    String field2Id = \"nome_banco\";\r\n    Form form2 = FormUtil.findRootForm(element);\r\n    Element field2 = FormUtil.findElement(field2Id, form2, formData);\r\n    String field2Values = FormUtil.getElementPropertyValue(field2, formData);\r\n  \r\n    if (field1 != null) {\r\n        //get value of field 1\r\n        String[] field1Values = FormUtil.getElementPropertyValue(field1, formData);\r\n  \r\n        if(field1Values[0].equalsIgnoreCase(\"NB\") && field2Values.isEmpty() ){\r\n            String id = FormUtil.getElementParameterName(element);\r\n            formData.addFormError(id, \"Campo obrigatório quando se trata de um processo do Novo Banco\");\r\n            result = false;\r\n        }\r\n    } else {\r\n        //ignore if the dropdown does not exist\r\n    }\r\n  \r\n    return result;\r\n}\r\n  \r\n//call validate method with injected variable\r\nreturn validate(element, formData, values);"
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section3",
                "join": "",
                "label": "Banco",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "nome",
                            "label": "Nome Completo",
                            "maxlength": "",
                            "permission_rules": {"3e334771-7c1d-4882-b298-443c91d6bf3e": {}},
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "40%",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.DefaultValidator",
                                "properties": {
                                    "mandatory": "true",
                                    "message": "#i18n.mandatorymsg#",
                                    "type": ""
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "nif",
                            "label": "NIF",
                            "maxlength": "9",
                            "permission_rules": {"3e334771-7c1d-4882-b298-443c91d6bf3e": {}},
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.BeanShellValidator",
                                "properties": {
                                    "decoration": "*",
                                    "script": "import java.util.Arrays;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.service.FormUtil;\n\nString id = FormUtil.getElementParameterName(element);\nString number = \"\";\nif(values.length > 0){\n    number = values[0];\n}\n\nif(number.isEmpty()){\n    formData.addFormError(id, \"Por favor introduza o NIF\");\n    return false;\n}\n\nfinal int max=9;\n//check if is numeric and has 9 numbers\nif (!number.matches(\"[0-9]+\") || number.length()!=max){\n    formData.addFormError(id, \"NIF deve ter 9 digitos\");\n    return false;\n}\n\nint checkSum=0;\n//calculate checkSum\nfor (int i=0; i<max-1; i++){\n\tcheckSum+=(number.charAt(i)-'0')*(max-i);\n}\nint checkDigit=11-(checkSum % 11);\n//if checkDigit is higher than 9 set it to zero\nif (checkDigit>9) checkDigit=0;\n//compare checkDigit with the last number of NIF\nif (checkDigit!=number.charAt(max-1)-'0'){\n    formData.addFormError(id, \"NIF inválido\");\n    return false;\n}\nreturn true;"
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section2",
                "join": "",
                "label": "Cliente",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "importaProcesso",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Importa Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import java.util.Map;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.apps.app.service.AppService;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.workflow.model.service.WorkflowManager;\r\nimport org.joget.workflow.model.WorkflowAssignment;\r\nimport org.joget.workflow.model.WorkflowProcess;\r\nimport org.joget.workflow.model.WorkflowProcessResult;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.service.FormUtil;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.commons.util.UuidGenerator;\r\nimport org.joget.commons.util.LogUtil;\r\nimport org.joget.workflow.model.service.*;\r\n  \r\npublic FormRowSet storeData(Element element, FormRowSet rows, FormData formData) {\r\n    try{\r\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n        WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        //get value from form to set workflow variables\r\n        FormRow originalRow = rows.get(0);\r\n        bancoValor = originalRow.getProperty(\"nome_banco\");\r\n        complexidadeValor = originalRow.getProperty(\"complex_processo\");\r\n        LogUtil.info(\"Beanshell import\", \"bancoValor: \" + bancoValor);\r\n        LogUtil.info(\"Beanshell import\", \"complexidadeValor: \" + complexidadeValor);\r\n        \r\n        \r\n        //get process\r\n        WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"CreditoHabitacao\");\r\n        LogUtil.info(appDef.toString(), \"ProcessDefId: \" + process.getId());\r\n        \r\n        //start process with variables\r\n        Map variables = new HashMap();\r\n        variables.put(\"banco\", bancoValor);\r\n        variables.put(\"complexidade\", complexidadeValor);\r\n        WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\r\n        \r\n        //get current record id\r\n        String processId = result.getProcess().getInstanceId();\r\n        LogUtil.info(appDef.toString(), \"Process id = \" + processId);\r\n        \r\n        FormRowSet multipagedForms = new FormRowSet();\r\n        FormRow formPrimaryKey = new FormRow();\r\n        \r\n        String[] fieldIds = {\"detalhe_processo\", \"intervenientes\", \"docs\", \"imoveis\", \"banco\", \"anal_banc\", \"anal_legal\", \"esclarecimentos\", \"comunicacoes\", \"geral\"};\r\n        String[] formIds = {\"detalheProcesso\", \"intervenientes\", \"documentos\", \"imoveis\", \"banco\", \"analiseBancaria\", \"analiseLegal\", \"esclarecimentos\", \"comunicacoes\", \"geral\"};\r\n        //String[] foreignKeys = new String[fieldIds.length];\r\n        \r\n        for(int i = 0; i < fieldIds.length; i++){\r\n            String foreignKey = UuidGenerator.getInstance().getUuid();\r\n            formPrimaryKey.setProperty(fieldIds[i], foreignKey);\r\n            \r\n            if(i != 0){\r\n                FormRowSet genericRowSet = new FormRowSet();\r\n                FormRow genericRow = new FormRow();\r\n                genericRow.setProperty(\"id_processo\", processId);\r\n                genericRowSet.add(genericRow);\r\n                //LogUtil.info(appDef.toString(), \"foreignKey:\" + foreignKeys[i]);\r\n                storeToOtherFormDataTable(appDef, element, genericRowSet, formData, formIds[i], foreignKey);\r\n            }else{\r\n                storeToOtherFormDataTable(appDef, element, rows, formData, formIds[i], foreignKey);\r\n            }\r\n        }\r\n        multipagedForms.add(formPrimaryKey);\r\n        LogUtil.info(appDef.toString(), \"passa:\" + multipagedForms);\r\n        \r\n        storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"processo\", processId);\r\n\r\n    }catch(Throwable e){\r\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\r\n    }\r\n     \r\n    return rows;\r\n}\r\n\r\npublic void storeToOtherFormDataTable(AppDefinition appDef, Element element, FormRowSet rows, FormData formData, String formId, String id) {\r\n    try{\r\n        LogUtil.info(appDef.toString(), \"id:\" + id);\r\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n  \r\n        FormRowSet storedInfo = appService.storeFormData(appDef.getId(), appDef.getVersion().toString(), formId, rows, id);\r\n        //LogUtil.info(appDef.toString(), \"Stored info:\" + storedInfo);\r\n    }catch(Throwable e){\r\n        LogUtil.error(appDef.toString(), e, \"Error storing data\");\r\n    }\r\n    \r\n}\r\n  \r\n//call execute method with injected variable\r\nreturn storeData(element, rows, formData);",
                "useAjax": ""
            }
        },
        "tableName": "processos_temp"
    }
}