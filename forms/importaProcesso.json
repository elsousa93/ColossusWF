{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "complex_processo",
                            "label": "Complexidade do Processo",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'complexidade_processo'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "NOR",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "fase_processo",
                            "label": "Fase do Processo",
                            "multiple": "",
                            "options": [{
                                "grouping": "",
                                "label": "Contratação",
                                "value": "CNT"
                            }],
                            "optionsBinder": {
                                "className": "",
                                "properties": {}
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.DatePicker",
                        "properties": {
                            "allowManual": "",
                            "datePickerType": "utcdateTime",
                            "endDateFieldId": "",
                            "format24hr": "true",
                            "id": "data_entrada",
                            "label": "Data de Entrada",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "showUserTimeZone": "",
                            "startDateFieldId": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "#date.dd/MM/yyyy HH:MM#",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "forma_outorga",
                            "label": "Forma de Outorga",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "true",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'forma_outorga'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "origem_processo",
                            "label": "Origem do Processo",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "true",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'origem_processo'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "estado_contratacao",
                            "label": "Estado da Contratação",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.FormOptionsBinder",
                                "properties": {
                                    "addEmptyOption": "true",
                                    "cacheInterval": "",
                                    "emptyLabel": "",
                                    "extraCondition": "c_nome_campo = 'estado_contratacao'",
                                    "formDefId": "adicionarOpcaoLV",
                                    "groupingColumn": "",
                                    "idColumn": "value",
                                    "labelColumn": "label",
                                    "useAjax": ""
                                }
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.Radio",
                        "properties": {
                            "controlField": "",
                            "id": "gerar_numero",
                            "label": "Gerar número de Workflow?",
                            "options": [
                                {
                                    "grouping": "",
                                    "label": "Sim",
                                    "value": "sim"
                                },
                                {
                                    "grouping": "",
                                    "label": "Não",
                                    "value": "nao"
                                }
                            ],
                            "optionsBinder": {
                                "className": "",
                                "properties": {}
                            },
                            "readonly": "",
                            "readonlyLabel": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "nao",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {
                    "customWidth": "100%",
                    "horizontal": "",
                    "label": "",
                    "width": "100%"
                }
            }],
            "properties": {
                "comment": "",
                "id": "section1",
                "join": "",
                "label": "Detalhe de Processo",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "n_wf_banco",
                            "label": "Número Workflow Banco",
                            "maxlength": "",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.DefaultValidator",
                                "properties": {
                                    "mandatory": "true",
                                    "message": "#i18n.mandatorymsg#",
                                    "type": ""
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.SelectBox",
                        "properties": {
                            "controlField": "",
                            "id": "nome_banco",
                            "label": "Nome do Banco",
                            "multiple": "",
                            "options": [],
                            "optionsBinder": {
                                "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                                "properties": {
                                    "cacheInterval": "",
                                    "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.Form;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.defaultHashVariablePlugin;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport java.util.ArrayList;\r\n\r\n \r\npublic FormRowSet load(Element element, String primaryKey, FormData formData) {\r\n    //LogUtil.info(\"Element ----->\", element.toString());\r\n    FormRowSet rows = new FormRowSet();\r\n    \r\n    //String cUserDepartmentName = \"#currentUser.department.name#\";\r\n    String cUserDepartmentID = \"#currentUser.department.id#\";\r\n    \r\n    //String[] cUserDepName = cUserDepartmentName.split(\";\");\r\n    String[] cUserDepID = cUserDepartmentID.split(\";\");\r\n    bancos = new ArrayList();\r\n    for(int i = 0; i < cUserDepID.length; i++ ){\r\n        if(cUserDepID[i].length() > 11){\r\n            String value = cUserDepID[i].substring(11,14);\r\n            if(!bancos.contains(value)){\r\n                bancos.add(value);\r\n            }\r\n            //LogUtil.info(\"Select equipa ----->\", \"Entra:\" + equipa);\r\n        }\r\n    }\r\n    \r\n    if(bancos.size() > 1){\r\n        FormRow option = new FormRow();\r\n        option.setProperty(FormUtil.PROPERTY_VALUE, \"\");\r\n        option.setProperty(FormUtil.PROPERTY_LABEL, \"\");\r\n        rows.add(option);\r\n    }\r\n    for(String banco : bancos){\r\n        LogUtil.info(\"Select banco ----->\", banco);\r\n        //if currentUser belongs to more than 1 bank, add empty option to ensure that the right one is chosen\r\n        FormRow option = new FormRow();\r\n        option.setProperty(FormUtil.PROPERTY_VALUE, banco);\r\n        option.setProperty(FormUtil.PROPERTY_LABEL, banco);\r\n        \r\n        rows.add(option);\r\n    }\r\n\r\n    return rows;\r\n}\r\n \r\n//call load method with injected variable\r\nreturn load(element, primaryKey, formData);",
                                    "useAjax": ""
                                }
                            },
                            "permission_rules": {"35a48421-7705-205a-acf4-18ee4c3e7a1f": {}},
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.DefaultValidator",
                                "properties": {
                                    "mandatory": "true",
                                    "message": "#i18n.mandatorymsg#",
                                    "type": ""
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "gestor_banco",
                            "label": "Gestor do Banco",
                            "maxlength": "",
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.CustomHTML",
                        "properties": {
                            "autoPopulate": "",
                            "id": "field13",
                            "label": "",
                            "value": "<script type=\"text/javascript\">\r\n    $(document).change(function(){\r\n        var nomeBancoId = \"nome_banco\";\r\n        var nWFBancoId = \"n_wf_banco\";\r\n        var nWFPlId = \"n_wf_pl\";\r\n  \r\n        //get values\r\n \r\n        var nomeBanco = $('[name='+nomeBancoId+']:enabled').val();\r\n        var nWFBanco = $('[name='+nWFBancoId+']:enabled').val();\r\n         \r\n        //function to compare\r\n \r\n        n_wf_pl = nomeBanco + \"DPA\" + nWFBanco;\r\n          \r\n        //store the value to a field\r\n        $('[name='+nWFPlId+']:enabled').val(n_wf_pl);\r\n    });\r\n<\/script>"
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "TODO:\n- Adicionar campos em falta (código da agencia)",
                "id": "section3",
                "join": "",
                "label": "Banco",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "nome",
                            "label": "Nome Completo",
                            "maxlength": "",
                            "permission_rules": {"3e334771-7c1d-4882-b298-443c91d6bf3e": {}},
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "40%",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "org.joget.apps.form.lib.DefaultValidator",
                                "properties": {
                                    "mandatory": "",
                                    "message": "#i18n.mandatorymsg#",
                                    "type": ""
                                }
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "nif",
                            "label": "NIF",
                            "maxlength": "",
                            "permission_rules": {"3e334771-7c1d-4882-b298-443c91d6bf3e": {}},
                            "placeholder": "",
                            "readonly": "",
                            "readonlyLabel": "",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "section2",
                "join": "",
                "label": "Cliente",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [{
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "n_wf_pl",
                        "label": "Número Processo PL",
                        "maxlength": "",
                        "permissionHidden": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.DuplicateValueValidator",
                            "properties": {
                                "errorDuplicateMsg": "Este número de Processo já existe.",
                                "errorFormatMsg": "",
                                "fieldId": "n_wf_pl",
                                "formDefId": "detalheProcesso",
                                "mandatory": "true",
                                "regex": ""
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                }],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "calculatedValues",
                "join": "",
                "label": "Campos Preenchidos Automaticamente",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionReadonly": "",
                "readonly": "",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "true",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "n_wf_banco",
                "visibilityValue": "sim"
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "importaProcesso",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Importa Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import java.util.Map;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.apps.app.service.AppService;\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.workflow.model.service.WorkflowManager;\r\nimport org.joget.workflow.model.WorkflowAssignment;\r\nimport org.joget.workflow.model.WorkflowProcess;\r\nimport org.joget.workflow.model.WorkflowProcessResult;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.commons.util.UuidGenerator;\r\nimport org.joget.commons.util.LogUtil;\r\nimport org.joget.workflow.model.service.*;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport java.time.LocalDateTime; \r\nimport java.time.format.DateTimeFormatter;\r\nimport javax.swing.JOptionPane.showMessageDialog;\r\n\r\n\r\npublic String calculateSLAD(String dataInicio){\r\n    \r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter);  \r\n    String endDate = \"\";\r\n    \r\n    var hour = dateInit.getHour();\r\n\r\n    if(hour < 12){\r\n       endDate = dateInit.withHour(23).withMinute(59).format(formatter);\r\n    }else{\r\n        endDate = dateInit.plusDays(1).withHour(12).withMinute(0).format(formatter);\r\n        \r\n    }\r\n    \r\n    return endDate;\r\n}\r\n\r\npublic String addOneHour(String data){\r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n    LocalDateTime date = LocalDateTime.parse(data, formatter);\r\n    \r\n    String correctDate = \"\";\r\n    \r\n    correctDate = date.plusHours(1).format(formatter);\r\n    \r\n    return correctDate;\r\n}\r\n\r\npublic FormRowSet storeData(Element element, FormRowSet rows, FormData formData) {\r\n    try{\r\n        //check for empty data\r\n        if (rows == null || rows.isEmpty()) {\r\n            return rows;\r\n        }\r\n        \r\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n        WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        LogUtil.info(\"Beanshell import\", \"appDef: \" + appDef);\r\n        \r\n        //get value from form to set workflow variables\r\n        FormRow originalRow = rows.get(0);\r\n        bancoValor = originalRow.getProperty(\"nome_banco\");\r\n        complexidadeValor = originalRow.getProperty(\"complex_processo\");\r\n        nWFBanco = originalRow.getProperty(\"n_wf_banco\");\r\n        flagGerarNr = originalRow.getProperty(\"gerar_numero\");\r\n        LogUtil.info(\"Beanshell import\", \"flagGerarNr: \" + flagGerarNr);\r\n        \r\n        String n_wf_pl = \"\";\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        boolean existe = false;\r\n        \r\n        /**create n_wf_pl\r\n         * If the flag to automatically generate the number is active then we need to obtain the maximum number generated untill now and increment that value\r\n         * TODO - TOrnar automatico o mecanismo de de ir buscar o numero maximo existente\r\n         * **/\r\n         \r\n        if(flagGerarNr.equals(\"sim\")){\r\n            \r\n            //Get maximum valu from DB\r\n            try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con = ds.getConnection();\r\n                \r\n                if(!con.isClosed()){\r\n                    //Set query\r\n                    String query = \"SELECT Max(replace(c_n_wf_pl, 'PLDPA', '')) as num_max FROM app_fd_processos p JOIN app_fd_detalhe_processo where c_n_wf_pl like 'PLDPA%' and length(c_n_wf_pl) = 15\";\r\n                    stmt = con.prepareStatement(query);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    //Get Value from result set\r\n                    if (rs.next()) {\r\n                        nWFBanco = rs.getString(1);\r\n                        LogUtil.info(\"Beanshell import\", \"nWFBanco BD: \" + nWFBanco);\r\n                    }else{\r\n                        nWFBanco = \"0\";\r\n                    }\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(\"appDef.toString()\", e, \"Error getting info from DB\");\r\n            }finally{\r\n                try{\r\n                    if(rs != null){\r\n                        rs.close();\r\n                    }\r\n                    if(stmt != null){\r\n                        stmt.close();\r\n                    }\r\n                    if(con != null && !con.isClosed()) {\r\n                        con.close();\r\n                    }\r\n                }catch(Exception e){\r\n                    LogUtil.error(\"appDef.toString()\", e, \"Error closing DB connection\");\r\n                }\r\n                \r\n            }\r\n            \r\n            nWFBanco = String.valueOf(Integer.valueOf(nWFBanco) + 1);\r\n            LogUtil.info(\"Beanshell import\", \"nWFBanco: \" + nWFBanco);\r\n            nWFBanco = \"000000000\" + nWFBanco;\r\n            LogUtil.info(\"Beanshell import\", \"nWFBanco: \" + nWFBanco);\r\n            nWFBanco = nWFBanco.substring(nWFBanco.length() - 10);\r\n            \r\n            LogUtil.info(\"Beanshell import\", \"nWFBanco: \" + nWFBanco);\r\n            \r\n            n_wf_pl = \"PLDPA\" + nWFBanco;\r\n            \r\n            \r\n            LogUtil.info(\"Beanshell import\", \"n_wf_pl: \" + n_wf_pl);\r\n        }else{\r\n            n_wf_pl = bancoValor + \"DPA\" + nWFBanco; \r\n        }\r\n        \r\n        try{\r\n            DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n            con = ds.getConnection();\r\n            \r\n            if(!con.isClosed()){\r\n                String query = \"SELECT p.id FROM app_fd_processos p JOIN app_fd_detalhe_processo dp ON dp.id = p.c_detalhe_processo WHERE dp.c_n_wf_pl = ?\";\r\n                stmt = con.prepareStatement(query);\r\n                stmt.setObject(1, n_wf_pl);\r\n                rs = stmt.executeQuery();\r\n                //LogUtil.info(\"Beanshell import ---------\", \"1\");\r\n                if (rs.next()) {\r\n                    existe = true;\r\n                    //LogUtil.info(\"Beanshell import ---------\", existe.toString());\r\n                }\r\n            }\r\n        }catch(Exception e){\r\n            LogUtil.error(appDef.toString(), e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n        \r\n        if(!existe){\r\n            //get process\r\n            WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"CreditoHabitacao\");\r\n            //LogUtil.info(appDef.toString(), \"ProcessDefId: \" + process.getId());\r\n            \r\n            //start process with variables\r\n            Map variables = new HashMap();\r\n            variables.put(\"banco\", bancoValor);\r\n            variables.put(\"complexidade\", complexidadeValor);\r\n            WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\r\n\r\n            //get current record id\r\n            String processId = result.getProcess().getInstanceId();\r\n            LogUtil.info(appDef.toString(), \"Process id = \" + processId);\r\n            \r\n            FormRowSet multipagedForms = new FormRowSet();\r\n            FormRow formPrimaryKey = new FormRow();\r\n            \r\n            String[] fieldIds = {\"detalhe_processo\", \"intervenientes\", \"docs\", \"imoveis\", \"banco\", \"anal_banc\", \"anal_legal\", \"esclarecimentos\", \"comunicacoes\", \"geral\"};\r\n            String[] formIds = {\"detalheProcesso\", \"intervenientes\", \"documentos\", \"imoveis\", \"banco\", \"analiseBancaria\", \"analiseLegal\", \"esclarecimentos\", \"comunicacoes\", \"geral\"};\r\n    \r\n            for(int i = 0; i < fieldIds.length; i++){\r\n                String foreignKey = UuidGenerator.getInstance().getUuid();\r\n                formPrimaryKey.setProperty(fieldIds[i], foreignKey);\r\n    \r\n                FormRowSet newRows = new FormRowSet();\r\n                FormRow newRow = new FormRow();\r\n                if(fieldIds[i].equals(\"detalhe_processo\") ){\r\n                    //store only corresponding field by creating new FormRowSet\r\n                    newRow.put(\"n_wf_banco\", originalRow.getProperty(\"n_wf_banco\"));\r\n                    newRow.put(\"complex_processo\", originalRow.getProperty(\"complex_processo\"));\r\n                    newRow.put(\"fase_processo\", originalRow.getProperty(\"fase_processo\"));\r\n                    newRow.put(\"data_entrada\", originalRow.getProperty(\"data_entrada\"));\r\n                    newRow.put(\"forma_outorga\", originalRow.getProperty(\"forma_outorga\"));\r\n                    newRow.put(\"origem_processo\", originalRow.getProperty(\"origem_processo\"));\r\n                    newRow.put(\"estado_contratacao\", originalRow.getProperty(\"estado_contratacao\"));\r\n                    newRow.put(\"n_wf_pl\", n_wf_pl);\r\n                    \r\n                }else if(fieldIds[i].equals(\"banco\") ){\r\n                    //store only corresponding field by creating new FormRowSet\r\n                    newRow.put(\"nome_banco\", originalRow.getProperty(\"nome_banco\"));\r\n                    newRow.put(\"gestor_banco\", originalRow.getProperty(\"gestor_banco\"));\r\n                    \r\n                }else if(fieldIds[i].equals(\"intervenientes\") ){\r\n                    String intervenienteId = UuidGenerator.getInstance().getUuid();\r\n                    if(!originalRow.getProperty(\"nome\").isEmpty() || !originalRow.getProperty(\"nif\").isEmpty()){\r\n                        FormRowSet newGridRows = new FormRowSet();\r\n                        FormRow newGridRow = new FormRow();\r\n                        \r\n                        newGridRow.put(\"id_intervenientes\", foreignKey);\r\n                        newGridRow.put(\"nome\", originalRow.getProperty(\"nome\"));\r\n                        newGridRow.put(\"nif\", originalRow.getProperty(\"nif\"));\r\n                        \r\n                        newGridRows.add(newGridRow);\r\n                        storeToOtherFormDataTable(appDef, element, newGridRows, formData, \"interveniente\", intervenienteId);\r\n                    }\r\n                }\r\n                newRow.setProperty(\"id_processo\", processId);\r\n                newRows.add(newRow);\r\n                storeToOtherFormDataTable(appDef, element, newRows, formData, formIds[i], foreignKey);\r\n            }\r\n            multipagedForms.add(formPrimaryKey);\r\n            //LogUtil.info(appDef.toString(), \"passa:\" + multipagedForms);\r\n            \r\n            storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"processo\", processId);\r\n            \r\n            \r\n            // Criar SLA com estado a 'Em curso'\r\n            String queryGetAssignment = \"SELECT id, name, resourcerequesterid  FROM shkprocesses WHERE activityrequesterprocessid =? AND id like '%contratacao%' order by created desc;\";\r\n            String queryGetUserAssign = \"SELECT resourceid FROM shkassignmentstable WHERE activityprocessid =?\";\r\n            String idSubProcesso= \"\";\r\n            String nomeAtividade = \"\";\r\n            String utilizador = \"\";\r\n            Connection con2=null;\r\n            try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con2 = ds.getConnection();\r\n                if(!con2.isClosed()){\r\n                    \r\n                    stmt = con2.prepareStatement(queryGetAssignment);\r\n                    stmt.setObject(1, processId);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    if(rs.next()){\r\n                        idSubProcesso = rs.getObject(\"id\").toString();\r\n                        nomeAtividade= rs.getObject(\"name\").toString();\r\n                    }\r\n                    \r\n                    LogUtil.info(\"IDSUB\", \"\" + idSubProcesso);\r\n                    stmt = con2.prepareStatement(queryGetUserAssign);\r\n                    stmt.setObject(1, idSubProcesso);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    if(rs.next()){\r\n                        utilizador= rs.getObject(\"resourceid\").toString();\r\n                    }\r\n                    LogUtil.info(\"utilizador\", \"\" + utilizador);\r\n                    \r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(appDef.toString(), e, \"Error getting info from DB\");\r\n            }finally{\r\n                try{\r\n                    if(rs != null){\r\n                    rs.close();\r\n                    }\r\n                    if(stmt != null){\r\n                        stmt.close();\r\n                    }\r\n                    if(con2 != null && !con2.isClosed()) {\r\n                        con2.close();\r\n                    }\r\n                }catch(Exception e){\r\n                    LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\r\n                }\r\n            }\r\n                \r\n                var idSLA = UuidGenerator.getInstance().getUuid();\r\n                var estadoAtividade = \"Em curso\";\r\n                var dataInicio = addOneHour(originalRow.getProperty(\"data_entrada\"));    /** A DATA DE INICIO ESCOLHIDA NO INPUT É GUARDADA COM MENOS UMA HORA NA BASE DE DADOS**/\r\n                String dataFim = calculateSLAD(dataInicio);\r\n\r\n                FormRowSet rowSetSLA = new FormRowSet();\r\n                FormRow rowsSLA = new FormRow();\r\n                rowsSLA.put(\"id_processo\", idSubProcesso);\r\n                rowsSLA.put(\"nome_atividade\", nomeAtividade);\r\n                rowsSLA.put(\"data_inicio\", dataInicio);\r\n                rowsSLA.put(\"sla\", originalRow.getProperty(\"data_entrada\"));\r\n                rowsSLA.put(\"data_fim\", dataFim);\r\n                rowsSLA.put(\"utilizador_atribuido\", utilizador);\r\n                rowsSLA.put(\"estado_atividade\", estadoAtividade);\r\n                rowSetSLA.add(rowsSLA);\r\n                storeToOtherFormDataTable(appDef, element, rowSetSLA, formData, \"slaAtividade\", idSLA);\r\n                \r\n        }else{\r\n            LogUtil.info(appDef.toString(), \"Número de Workflow já existente em sistema\");\r\n            //Apresentar erro e nao deixar criar o processo\r\n            ////String id = \"importaProcesso_nome_banco\";\r\n            ////formData.addFormError(id, \"Não é possível criar um processo com o Número Workflow Banco = \" + nWFBanco + \". O mesmo já está associado a um processo do banco \" + bancoValor + \".\");\r\n            //LogUtil.info(\"Beanshell store binder ------\", id);\r\n        }\r\n        \r\n\r\n    }catch(Exception e){\r\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\r\n    }\r\n     \r\n    return rows;\r\n}\r\n\r\n\r\npublic void storeToOtherFormDataTable(AppDefinition appDef, Element element, FormRowSet rows, FormData formData, String formId, String id) {\r\n    try{\r\n        //LogUtil.info(appDef.toString(), \"id:\" + id);\r\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n  \r\n        FormRowSet storedInfo = appService.storeFormData(appDef.getId(), appDef.getVersion().toString(), formId, rows, id);\r\n        //LogUtil.info(appDef.toString(), \"Stored info:\" + storedInfo);\r\n    }catch(Exception e){\r\n        LogUtil.error(appDef.toString(), e, \"Error storing data\");\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n  \r\n//call execute method with injected variable\r\nreturn storeData(element, rows, formData);",
                "useAjax": ""
            }
        },
        "tableName": "processos_temp"
    }
}