{
    "className": "org.joget.apps.form.model.Form",
    "elements": [{
        "className": "org.joget.apps.form.model.Section",
        "elements": [{
            "className": "org.joget.apps.form.model.Column",
            "elements": [
                {
                    "className": "org.joget.apps.form.lib.HiddenField",
                    "properties": {
                        "id": "processo_manual",
                        "useDefaultWhenEmpty": "",
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "",
                        "id": "nome_banco",
                        "label": "Nome do Banco",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.FormOptionsBinder",
                            "properties": {
                                "addEmptyOption": "true",
                                "cacheInterval": "",
                                "emptyLabel": "",
                                "extraCondition": "c_nome_campo = 'nome_banco' AND e.customProperties.servico LIKE '%DIST%'",
                                "formDefId": "adicionarOpcaoLV",
                                "groupingColumn": "",
                                "idColumn": "value",
                                "labelColumn": "label",
                                "useAjax": ""
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "org.joget.apps.form.lib.DefaultValidator",
                            "properties": {
                                "mandatory": "true",
                                "message": "#i18n.mandatorymsg#",
                                "type": ""
                            }
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.TextField",
                    "properties": {
                        "encryption": "",
                        "id": "num_pedido",
                        "label": "Número do Pedido",
                        "maxlength": "",
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "storeNumeric": "",
                        "style": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.DatePicker",
                    "properties": {
                        "allowManual": "",
                        "currentDateAs": "",
                        "dataFormat": "yyyy/MM/dd",
                        "datePickerType": "",
                        "endDateFieldId": "",
                        "format": "dd/mm/yy",
                        "id": "data_entrada",
                        "label": "Data de Entrada",
                        "permission_rules": {},
                        "placeholder": "",
                        "readonly": "",
                        "readonlyLabel": "",
                        "startDateFieldId": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": "",
                        "yearRange": "c-10:c+10"
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.SelectBox",
                    "properties": {
                        "controlField": "nome_banco",
                        "id": "estado_processo",
                        "label": "Estado do Processo",
                        "multiple": "",
                        "options": [],
                        "optionsBinder": {
                            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
                            "properties": {
                                "cacheInterval": "",
                                "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.model.FormStoreBinder;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.commons.util.LogUtil;\r\n\r\n \r\npublic FormRowSet load(String[] values) {\r\n\r\n    \r\n    FormRowSet rows = new FormRowSet();\r\n    \r\n    FormRow option = new FormRow();\r\n    option.setProperty(FormUtil.PROPERTY_VALUE, \"\");\r\n    option.setProperty(FormUtil.PROPERTY_LABEL, \"\");\r\n    rows.add(option);\r\n    \r\n    String banco = null;\r\n    if (values != null && values.length > 0) {\r\n        banco = \"%\" + values[0] + \"%\";\r\n    \r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n        String origem_value = \"\";\r\n        String origem_label = \"\";\r\n        \r\n        AppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n        \r\n        try{\r\n                DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n                con = ds.getConnection();\r\n                \r\n                \r\n                if(!con.isClosed()){\r\n                    String idDetalhe_processo = \"#form.processos_distrates.detalhe_proce_dist#\";\r\n                    //Verificar o utilizador atribuido e atualizar caso esteja errado\r\n                    String query=\"SELECT c_value, c_label FROM app_fd_listas_de_valores WHERE c_nome_campo = ? AND c_banco LIKE ? AND c_servico LIKE '%DIST%';\";\r\n                    stmt = con.prepareStatement(query);\r\n                    stmt.setObject(1, \"estado_processo\");\r\n                    stmt.setObject(2, banco);\r\n                    rs = stmt.executeQuery();\r\n                    \r\n                    while(rs.next()){\r\n                        //LogUtil.info(\"Aaa\" , \"BBB\");\r\n                        origem_value = rs.getString(1);\r\n                        origem_label = rs.getString(2);\r\n                        \r\n                        FormRow option = new FormRow();\r\n                        option.setProperty(FormUtil.PROPERTY_VALUE, origem_value);\r\n                        option.setProperty(FormUtil.PROPERTY_LABEL, origem_label);\r\n                        \r\n                        rows.add(option);\r\n                        \r\n                    }\r\n                }\r\n                \r\n        }catch(Exception e){\r\n            LogUtil.error(\"Importa processo - origem de processo\", e, \"Error getting info from DB\");\r\n        }finally{\r\n            try{\r\n                if(rs != null){\r\n                rs.close();\r\n                }\r\n                if(stmt != null){\r\n                    stmt.close();\r\n                }\r\n                if(con != null && !con.isClosed()) {\r\n                    con.close();\r\n                }\r\n            }catch(Exception e){\r\n                LogUtil.error(\"Importa processo - origem de processo\", e, \"Error closing DB connection\");\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    return rows;\r\n}\r\n \r\n//call load method with injected variable\r\nreturn load(values);",
                                "useAjax": "true"
                            }
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "size": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": ""
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.Radio",
                    "properties": {
                        "controlField": "",
                        "id": "enviarProcuradoria",
                        "label": "Enviar para Procuradoria ?",
                        "options": [
                            {
                                "grouping": "",
                                "label": "Sim",
                                "value": "SIM"
                            },
                            {
                                "grouping": "",
                                "label": "Não",
                                "value": "NAO"
                            }
                        ],
                        "optionsBinder": {
                            "className": "",
                            "properties": {}
                        },
                        "readonly": "",
                        "readonlyLabel": "",
                        "validator": {
                            "className": "",
                            "properties": {}
                        },
                        "value": "",
                        "workflowVariable": "enviar_procuradoria"
                    }
                },
                {
                    "className": "org.joget.apps.form.lib.CustomHTML",
                    "properties": {
                        "autoPopulate": "",
                        "id": "set_manual",
                        "label": "",
                        "value": "<script type=\"text/javascript\">\r\n    $(document).change(function(){\r\n        var processo_manual_id = \"processo_manual\";\r\n  \r\n        //get values\r\n        //var processo_manual = $('[name='+processo_manual_id+']:enabled').val();\r\n        var processo_manual = FormUtil.getValue(\"processo_manual_id\");\r\n        \r\n        //verify if it's a manual process creation\r\n        if (processo_manual != null && processo_manual !== \"SIM\"){\r\n            //store the value to a field\r\n            //$('[name='+processo_manual_id+']:enabled').val(\"SIM\");\r\n            processo_manual = \"SIM\";\r\n            var field = FormUtil.getField(processo_manual_id);\r\n            $(field).val(processo_manual); //set value\r\n        }\r\n        //console.log(\"Não\" + processo_manual);\r\n        \r\n        //Flag para reencaminhar para o processo\r\n        window.sessionStorage.setItem(\"previousPage\", \"importar\");\r\n        window.sessionStorage.setItem(\"nwf\", $(\"input#num_pedido\").val().trim());\r\n        window.sessionStorage.setItem(\"servico\", \"dist\");\r\n    });\r\n    \r\n    $(document).ready(function(){\r\n        //Esconder Enviar para Procuradoria \r\n       // $(\"div[id*=enviarProcuradoria]\").parent().hide();\r\n        \r\n        \r\n    });\r\n    \r\n<\/script>\r\n"
                    }
                }
            ],
            "properties": {"width": "100%"}
        }],
        "properties": {
            "comment": "",
            "id": "criarProcesso",
            "join": "",
            "label": "Criar Processo",
            "loadBinder": {
                "className": "",
                "properties": {}
            },
            "permission": {
                "className": "",
                "properties": {}
            },
            "permissionReadonly": "",
            "readonly": "",
            "readonlyLabel": "",
            "regex": "",
            "reverse": "",
            "storeBinder": {
                "className": "",
                "properties": {}
            },
            "visibilityControl": "",
            "visibilityValue": ""
        }
    }],
    "properties": {
        "description": "",
        "id": "criarProcessoDistrates",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Distrates - Criar/Importar Processo",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.joget.apps.app.model.AppDefinition;\nimport org.joget.apps.app.service.AppService;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.workflow.model.service.WorkflowManager;\nimport org.joget.workflow.model.WorkflowAssignment;\nimport org.joget.workflow.model.WorkflowProcess;\nimport org.joget.workflow.model.WorkflowProcessResult;\nimport org.joget.workflow.model.WorkflowActivity;\nimport org.joget.apps.form.model.Element;\nimport org.joget.apps.form.service.FormUtil;\nimport org.joget.apps.form.model.FormData;\nimport org.joget.apps.form.model.FormRow;\nimport org.joget.apps.form.model.FormRowSet;\nimport org.joget.commons.util.UuidGenerator;\nimport org.joget.commons.util.LogUtil;\nimport org.joget.workflow.model.service.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport java.time.LocalDateTime; \nimport java.time.format.DateTimeFormatter;\n\n\n/****************************************************  Métodos de SLA  ***********************************************************/\n\n\npublic String calculateSLAD(String dataInicio, Collection feriados){\n    \n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\");\n    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter);  \n    LocalDateTime endDateTime = null;\n    String endDate = \"\";\n    Collection holidays = feriados;\n   \n    \n    var hour = dateInit.getHour();\n\n    if(hour < 12){\n        endDateTime = dateInit.withHour(23).withMinute(59);\n        while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\n           endDateTime = endDateTime.plusDays(1);\n        }\n        endDate = endDateTime.format(formatter);\n    }else{\n        endDateTime = dateInit.plusDays(1).withHour(12).withMinute(0);\n        while(isWeekend(endDateTime) || holidays.contains(endDateTime.format(dateFormatter))){\n           endDateTime = endDateTime.plusDays(1);\n        }\n        endDate = endDateTime.format(formatter);\n    }\n    \n    return endDate;\n}\n\npublic String durationSLA(String dataInicio){\n    var duracao=\"\";\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n    LocalDateTime dateInit = LocalDateTime.parse(dataInicio, formatter); \n    var hour = dateInit.getHour();\n    \n    if(hour < 12){\n        duracao=\"D\";\n    }else{\n        duracao=\"D+1\";\n    }\n    \n    return duracao;\n}\n\npublic boolean isWeekend(LocalDateTime dt) {\n    String dayOfWeek = dt.getDayOfWeek().toString();\n\n    switch(dayOfWeek) {\n        case \"SATURDAY\":{\n            return true;\n        }\n        case \"SUNDAY\":{\n            return true;\n        }\n        default:{\n            return false;\n        }\n    }\n}\n\n/***************************************************************************************************************************/\n\n\n//Criar processos de Distrates\npublic FormRowSet storeData(Element element, FormRowSet rows, FormData formData) {\n \n    AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n    WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n    AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n\n        \n    try{\n        \n        //check for empty data\n        if (rows == null || rows.isEmpty()) {\n            return rows;\n        }\n        \n        //get value from form to set workflow variables\n        FormRow originalRow = rows.get(0);\n        String nomeBanco = originalRow.getProperty(\"nome_banco\");\n        String numeroPedido = originalRow.getProperty(\"num_pedido\");\n        String dataEntrada = originalRow.getProperty(\"data_entrada\");\n        LocalDateTime dateNow = null;\n        String estadoProcesso = originalRow.getProperty(\"estado_processo\");\n        \n        \n        //LogUtil.info(\"estadoProcesso\", \"CarolinaAntes\" + estadoProcesso);\n        if(estadoProcesso == null || estadoProcesso.isEmpty()){\n            estadoProcesso = \"NOV\";\n           // LogUtil.info(\"estadoProcesso\", \"CarolinaDepois\" + estadoProcesso);\n        }\n       \n        String enviarProcuradoria = originalRow.getProperty(\"enviarProcuradoria\");\n        \n    \n        if (dataEntrada == null || dataEntrada.length() == 0){ //se data esta preenchida\n           // dataEntrada = \"#date.yyyy-MM-dd HH:mm#\";\n            dataEntrada = \"#date.yyyy/MM/dd HH:mm#\";\n           // LogUtil.info(\"dataEntrada\", \"CarolinaDepois\" + dataEntrada);\n        }\n        \n        \n        //start process with variables\n        Map variables = new HashMap();\n        variables.put(\"banco\", nomeBanco);\n        variables.put(\"enviar_procuradoria\", enviarProcuradoria);\n        \n        String processo_manual = originalRow.getProperty(\"processo_manual\");\n            \n            //Verify if the process is starting manually and if so allocates the process to the current User\n            if (processo_manual != null && processo_manual.equals(\"SIM\")){\n                String user_variable = \"\";\n                if (nomeBanco.equals(\"MTG\")){\n                    user_variable = \"user_dist_\" + nomeBanco.toLowerCase() + \"1\"; //creates the variable name used on the task allocation plugin\n                }else if (nomeBanco.equals(\"ABN\")){\n                    user_variable = \"user_dist_\" + nomeBanco.toLowerCase(); //creates the variable name used on the task allocation plugin\n                }else if (nomeBanco.equals(\"BCP\")){\n                    user_variable = \"user_dist_\" + nomeBanco.toLowerCase();       //creates the variable name used on the task allocation plugin\n                }else{\n                    user_variable = \"user_dist_\" + nomeBanco.toLowerCase() + \"1\";       //creates the variable name used on the task allocation plugin\n                }\n                LogUtil.info(\"User Distrates\", user_variable);\n                \n                variables.put(user_variable, \"#currentUser.username#\");\n            }\n        \n        //get process\n        WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"distrates\");\n        //start process\n        WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\n        //get process id\n        processId = result.getProcess().getInstanceId();\n        \n        \n        FormRowSet multipagedForms = new FormRowSet();\n        FormRow formPrimaryKey = new FormRow();\n        \n        //definition of the fields of table processos where to store each generated primary key\n        String[] fieldIds = {\"detalhe_processo\", \"documentos\", \"esclarecimentos\", \"comunicacoes\"};\n        //definition of the formIds that correspond to the pages of the multipage form\n        String[] formIds = {\"detalheDistrate\", \"documentosDistrates\", \"esclarecimentos\", \"comunicacoes\"};\n        \n        for(int i = 0; i < fieldIds.length; i++){\n            String foreignKey = UuidGenerator.getInstance().getUuid();\n            formPrimaryKey.setProperty(fieldIds[i], foreignKey);\n            \n            FormRowSet newRows = new FormRowSet();\n            FormRow newRow = new FormRow();\n            if(fieldIds[i].equals(\"detalhe_processo\") ){\n                newRow.put(\"nome_banco\", nomeBanco);\n                newRow.put(\"num_pedido\", numeroPedido);\n                newRow.put(\"estado_processo\", estadoProcesso);\n                newRow.put(\"data_entrada\", dataEntrada);\n                newRow.put(\"enviarProcuradoria\", enviarProcuradoria);\n                \n            }else if(fieldIds[i].equals(\"documentos\") ){\n                    \n            }else if(fieldIds[i].equals(\"esclarecimentos\")){\n                \n            }else if(fieldIds[i].equals(\"comunicacoes\") ){\n                    \n            }\n            newRow.setProperty(\"id_processo\", processId);\n            newRows.add(newRow);\n            \n            storeToOtherFormDataTable(appDef, element, newRows, formData, formIds[i], foreignKey);\n        }\n        formPrimaryKey.setProperty(\"servico\", \"DIST\");\n        multipagedForms.add(formPrimaryKey);\n\n        \n        storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"distrates\", processId);\n        \n        //Criar processo de Procuradoria\n        if(enviarProcuradoria.equals(\"SIM\")){\n            \n            criarProcessoProcuradoria(nomeBanco, numeroPedido, estadoProcesso, element, formData, processId);\n        }\n        \n        \n        \n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\n    }\n    return rows;           \n}\n\npublic void storeToOtherFormDataTable(AppDefinition appDef, Element element, FormRowSet rows, FormData formData, String formId, String id) {\n    try{\n        AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n        FormRowSet storedInfo = appService.storeFormData(appDef.getId(), appDef.getVersion().toString(), formId, rows, id);\n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error storing data\");\n    }\n}\n\npublic void criarProcessoProcuradoria(nomeBanco, numeroPedido, estadoProcesso, element, formData, idDistrates){\n    \n    AppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\n    WorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\n    AppDefinition appDef = AppUtil.getCurrentAppDefinition();\n    Connection con = null;\n    PreparedStatement stmt = null;\n    ResultSet rs = null;\n    try{\n        \n        String banco_fundo = nomeBanco;\n        String numeroProcesso = numeroPedido;\n        String tipoProcesso = \"DIST\";\n        String dataEntrada = \"#date.yyyy/MM/dd HH:mm#\";\n        String estado_processo =  estadoProcesso;\n        \n        if(estado_processo == null || estado_processo.isEmpty()){\n            estado_processo = \"NOV\";\n            LogUtil.info(\"estadoProcesso\", \"CarolinaDepois\" + estado_processo);\n        }\n        \n        /**Check if process exists**/\n        boolean processExists = false;\n        String processId = \"\";\n        \n        DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\n        con = ds.getConnection();\n        \n        if(!con.isClosed()){\n            String queryGetProcessId = \"SELECT p.id FROM app_fd_processos_procu p JOIN app_fd_detalhe_proce_procu dp ON dp.id = p.c_detalhe_processo WHERE dp.c_n_processo = ? \";\n            stmt = con.prepareStatement(queryGetProcessId);\n            stmt.setObject(1,numeroProcesso);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                processId = rs.getObject(\"p.id\");\n                processExists=true;\n                \n            }\n\n        //Se o processo não existir\n        if(!processExists){\n            //start process with variables\n            Map variables = new HashMap();\n            variables.put(\"id_distrates\", idDistrates);\n            //get process\n            WorkflowProcess process = appService.getWorkflowProcessForApp(appDef.getAppId(), appDef.getVersion().toString(), \"Procuradoria\");\n            //start process\n            WorkflowProcessResult result = workflowManager.processStart(process.getId(), variables);\n            //get process id\n            processId = result.getProcess().getInstanceId();\n            \n            //Atualizar variável no processo de Distrates\n            workflowManager.processVariable(idDistrates, \"enviado_procuradoria\" , \"1\");\n            \n            //Consoante o banco a atividade para atualizar a WF variable \"enviado_procuradoria\" é diferente. É necessário atualizar ao nivel da atividade, apenas no processo não funciona \n            String activityDefId = \"\";\n            if(nomeBanco.equals(\"BCP\")){\n                activityDefId = \"preenchimentoProcesso3\";\n            }else if(nomeBanco.equals(\"ABN\")){\n                activityDefId = \"preenchimentoProcesso\";\n            }else if(nomeBanco.equals(\"MTG\")){\n                activityDefId = \"preenchimentoProcesso2\";\n            }else if(nomeBanco.equals(\"BIC\")){\n                activityDefId = \"preenchimentoProcesso4\";\n            }\n            \n            //Obter subprocessId\n            String subprocessId = \"\";\n            String queryGetSubprocessId =\"SELECT id FROM shkprocesses WHERE ActivityRequesterProcessId = ?\";\n            stmt = con.prepareStatement(queryGetSubprocessId);\n            stmt.setObject(1,idDistrates);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                subprocessId = rs.getObject(\"id\");\n            }\n            \n            String instanceId = AppUtil.processHashVariable(\"#process.activityInst.\" + activityDefId + \".instanceId[\"+subprocessId+\"]#\",null,null,null);\n            workflowManager.activityVariable(instanceId,\"enviado_procuradoria\" , \"1\");\n            \n            \n            FormRowSet multipagedForms = new FormRowSet();\n            FormRow formPrimaryKey = new FormRow();\n            \n            //definition of the fields of table processos where to store each generated primary key\n            String[] fieldIds = {\"detalhe_processo\",\"comunicacoes\",\"agendamento\", \"documentos\", \"conclusao\"};\n            //definition of the formIds that correspond to the pages of the multipage form\n            String[] formIds = {\"detalheProcessoProcuradoria\", \"comunicacoes\", \"agendamentoProcuradoria\", \"ficheirosProcuradoria\", \"conclusaoProcuradoria\"};\n            \n            for(int i = 0; i < fieldIds.length; i++){\n                String foreignKey = UuidGenerator.getInstance().getUuid();\n                formPrimaryKey.setProperty(fieldIds[i], foreignKey);\n                \n                FormRowSet newRows = new FormRowSet();\n                FormRow newRow = new FormRow();\n                if(fieldIds[i].equals(\"detalhe_processo\") ){\n                    newRow.put(\"banco_fundo\", banco_fundo);\n                    newRow.put(\"n_processo\", numeroProcesso);\n                    newRow.put(\"tipo_processo\", tipoProcesso);\n                    newRow.put(\"estado_processo\", estado_processo);\n                    newRow.put(\"data_primeira_entrada\", dataEntrada);\n                    newRow.put(\"data_entrada\", dataEntrada);\n                    \n                }else if(fieldIds[i].equals(\"comunicacoes\")){\n                    \n                }else if(fieldIds[i].equals(\"agendamento\") ){\n                        \n                }else if(fieldIds[i].equals(\"documentos\") ){\n                        \n                }\n                newRow.setProperty(\"id_processo\", processId);\n                newRows.add(newRow);\n                \n                storeToOtherFormDataTable(appDef, element, newRows, formData, formIds[i], foreignKey);\n            }\n            formPrimaryKey.setProperty(\"servico\", \"PROCU\");\n            multipagedForms.add(formPrimaryKey);\n    \n            \n            storeToOtherFormDataTable(appDef, element, multipagedForms, formData, \"procuradoria\", processId);\n\n            \n            //Iniciar SLA\n            \n            String queryGetAssignment = \"SELECT id, name, resourcerequesterid  FROM shkprocesses WHERE activityrequesterprocessid =? AND id like '%procuradoria%' order by created desc;\";\n            String queryGetUserAssign = \"SELECT resourceid FROM shkassignmentstable WHERE activityprocessid =?\";\n            String idSubProcesso= \"\";\n            String nomeAtividade = \"\";\n            String utilizador = \"\";\n            Connection con2=null;\n            Collection holidays = new ArrayList(); \n            \n            \n            stmt = con.prepareStatement(queryGetAssignment);\n            stmt.setObject(1, processId);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                idSubProcesso = rs.getObject(\"id\").toString();\n                nomeAtividade= rs.getObject(\"name\").toString();\n            }\n            \n            stmt = con.prepareStatement(queryGetUserAssign);\n            stmt.setObject(1, idSubProcesso);\n            rs = stmt.executeQuery();\n            if(rs.next()){\n                utilizador= rs.getObject(\"resourceid\").toString();\n            }\n            \n                    \n            var idSLA = UuidGenerator.getInstance().getUuid();\n            var estadoAtividade = \"Em curso\";\n            //alteracao devido a mudanca do formato da data recebida\n            var dataInicio = dataEntrada; \n            String dataFim = \"\";\n            String duracao = \"\";\n            if(dataInicio != \"\"){\n            dataFim = calculateSLAD(dataInicio, holidays);\n            duracao =  durationSLA(dataInicio);\n            }\n    \n            \n            FormRowSet rowSetSLA = new FormRowSet();\n            FormRow rowsSLA = new FormRow();\n            rowsSLA.put(\"id_processo\", idSubProcesso);\n            rowsSLA.put(\"nome_atividade\", nomeAtividade);\n            rowsSLA.put(\"data_inicio\", dataInicio);\n            rowsSLA.put(\"data_fim\", dataFim);\n            rowsSLA.put(\"utilizador_atribuido\", utilizador);\n            rowsSLA.put(\"estado_atividade\", estadoAtividade);\n            rowsSLA.put(\"duracao\", duracao);\n            rowSetSLA.add(rowsSLA);\n            storeToOtherFormDataTable(appDef, element, rowSetSLA, formData, \"slaAtividade\", idSLA);\n            \n        \n            //Se o processo já existir\n        }else{\n            /*\n            FormRowSet newRows = new FormRowSet();\n            FormRow newRow = new FormRow();\n            \n            newRow.put(\"data_entrada\", dataEntrada);\n            newRows.add(newRow);\n            \n            String detalheProcessoPK = \"#form.processos_procu.detalhe_processo[\"+ processId + \"]#\";\n            detalheProcessoPK = AppUtil.processHashVariable(detalheProcessoPK,null,null,null);\n            \n            storeToOtherFormDataTable(appDef, element, newRows, formData, \"detalheProcessoProcuradoria\", detalheProcessoPK);\n            */\n        }\n    }\n        \n    }catch(Exception e){\n        LogUtil.error(appDef.toString(), e, \"Error creating process\");\n    }finally{\n        try{\n            if(rs != null){\n                rs.close();\n            }\n            if(stmt != null){\n                stmt.close();\n            }\n            if(con != null && !con.isClosed()) {\n                con.close();\n            }\n        }catch(Exception e){\n            LogUtil.error(appDef.toString(), e, \"Error closing DB connection\");\n        }\n \n    }\n    \n}\n\n\n//call execute method with injected variable\nreturn storeData(element, rows, formData);",
                "useAjax": ""
            }
        },
        "tableName": "processos_temp"
    }
}