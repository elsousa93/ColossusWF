{
    "actions": [{
        "className": "org.joget.plugin.enterprise.BeanShellDatalistAction",
        "icon": "<i class=\"fas fa-code\"><\/i>",
        "id": "action_0",
        "label": "Bean Shell",
        "name": "Bean Shell Datalist Action",
        "properties": {
            "confirmation": "",
            "datalist_type": "action",
            "label": "Começar processo",
            "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.app.service.AppService;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.workflow.model.service.WorkflowManager;\r\nimport org.joget.workflow.model.WorkflowAssignment;\r\nimport org.joget.workflow.model.WorkflowProcess;\r\nimport org.joget.workflow.model.WorkflowProcessResult;\r\nimport org.joget.workflow.util.WorkflowUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\n\r\n\r\n/** //this function will store rows data to external source using JDBC\r\npublic void storeUsingJDBC(FormRowSet rows, String id) {\r\n    Connection con = null;\r\n    try {\r\n        // retrieve connection from the default datasource\r\n        DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n        con = ds.getConnection();\r\n  \r\n        if (!con.isClosed()) {\r\n            //manually handle insert and update by checking the data exist or not\r\n            String selectQuery = \"SELECT id FROM app_fd_processos WHERE id=?\";\r\n            PreparedStatement stmt = con.prepareStatement(selectQuery);\r\n            stmt.setString(1, id);\r\n            ResultSet rs = stmt.executeQuery();\r\n  \r\n            Boolean isExist = false;\r\n            if (rs.next()) {\r\n                isExist = true;\r\n            }\r\n  \r\n            FormRow row = rows.get(0);\r\n  \r\n            if (isExist) {\r\n                String updateQuery = \"UPDATE app_fd_processos SET n_wf_banco = ?, nome_banco = ?, complex_processo = ? WHERE id = ?\";\r\n                PreparedStatement ustmt = con.prepareStatement(updateQuery);\r\n                ustmt.setString(1, row.getProperty(\"n_wf_banco\"));\r\n                ustmt.setString(2, row.getProperty(\"nome_banco\"));\r\n                ustmt.setString(3, row.getProperty(\"complex_processo\"));\r\n                ustmt.setString(4, id);\r\n                ustmt.executeUpdate();\r\n            } else {\r\n                String insertQuery = \"INSERT INTO app_fd_processos (id, n_wf_banco, nome_banco, complex_processo) values (?, ?, ?, ?)\";\r\n                PreparedStatement istmt = con.prepareStatement(insertQuery);\r\n                istmt.setString(1, id);\r\n                istmt.setString(2, row.getProperty(\"n_wf_banco\"));\r\n                istmt.setString(3, row.getProperty(\"nome_banco\"));\r\n                istmt.setString(4, row.getProperty(\"complex_processo\"));\r\n                istmt.executeUpdate();\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LogUtil.error(\"Sample app - StoreToMultipleSource form\", e, \"Error storing using jdbc\");\r\n    } finally {\r\n        try {\r\n            if(con != null) {\r\n                con.close();\r\n            }\r\n        } catch (SQLException e) {}\r\n    }\r\n}**/\r\n\r\nAppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n\r\n//define process to start\r\nString processDefKey = \"CHGlobal\";\r\n\r\n//utility bean\r\nWorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\r\nAppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n \r\n//get processDefId\r\nWorkflowProcess processDef = appService.getWorkflowProcessForApp(appDef.getId(), appDef.getVersion().toString(), processDefKey);\r\nString processDefId = processDef.getId();\r\n\r\nConnection con = null;\r\ntry {\r\n    // retrieve connection from the default datasource\r\n    DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    con = ds.getConnection();\r\n    \r\n    // executa queries ah BD\r\n    if(!con.isClosed()) {\r\n        for (String key : rowKeys) {\r\n            LogUtil.info(\"datalist\", \"Record key is \" + key);\r\n            PreparedStatement stmt = con.prepareStatement(\"SELECT * FROM app_fd_processos_temp WHERE id = ?\");\r\n            stmt.setObject(1, key);\r\n            ResultSet rs = stmt.executeQuery();            \r\n            ResultSetMetaData rsmd = rs.getMetaData;\r\n            \r\n            int columnsNumber = rsmd.getColumnCount();\r\n            String[][] colValue = new String[2][columnsNumber];\r\n            String n_wf_banco;\r\n            \r\n            while (rs.next()) {\r\n                for (int i = 1; i <= columnsNumber; i++) {\r\n                    colValue[0][i-1] = rsmd.getColumnName(i);\r\n                    colValue[1][i-1] = rs.getString(i);\r\n                    n_wf_banco = rs.getString(\"n_wf_banco\");\r\n                }\r\n            }\r\n            //Verifica se processo ja existe na BD atraves do n-wf-banco\r\n            stmt = con.prepareStatement(\"SELECT * FROM app_fd_processos WHERE n_wf_banco = ?\");\r\n            stmt.setObject(1, n_wf_banco);\r\n            rs = stmt.executeQuery();\r\n            Boolean exists = false;\r\n            if (rs.next()) {\r\n                exists = true;\r\n            }\r\n            //Inicia processo\r\n            if(!exists){ \r\n                LogUtil.info(appDef.toString(), \"Processing Record \" + key + \" - n_wf_banco: \" + rs.toString('n_wf_banco'));\r\n    \t\t    Map variables = new HashMap();\r\n    \t\t    //variables.put(\"batch\", batchId);\r\n    \t\t    String username = \"#currentUser.username#\";\r\n    \t\t    username = AppUtil.processHashVariable(username,null,null,null);\r\n    \t\t    \r\n    \t\t    WorkflowProcessResult result = workflowManager.processStart(processDefId, null, variables, username);\r\n                LogUtil.info(appDef.toString(), \"Processing Batch \" + key + \" - Record: \" + rs.getObject(\"id\") + \" - Status: \" + result.getProcess().getInstanceId());\r\n                \r\n                //storeUsingJDBC(String[][] colValue, String idProcesso);\r\n            }\r\n    } \r\n    \r\n} catch(Exception e) {\r\n    LogUtil.error(appDef.toString(), e, \"Error in creating approval process for batch \" + key);\r\n} finally {\r\n    //always close the connection after used\r\n    try {\r\n        if(con != null) {\r\n            con.close();\r\n        }\r\n    } catch(SQLException e) {/* ignored */}"
        },
        "type": "text"
    }],
    "binder": {
        "className": "org.joget.plugin.enterprise.AdvancedFormRowDataListBinder",
        "properties": {
            "customSelectionValue": "",
            "extraCondition": "",
            "filters": [],
            "formDefId": "importaProcesso",
            "functionColumns": [],
            "groupBy": "",
            "joins": []
        }
    },
    "buttonPosition": "bottomLeft",
    "checkboxPosition": "left",
    "columns": [
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_0",
            "label": "Número Workflow Banco",
            "name": "n_wf_banco",
            "sortable": "false"
        },
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_1",
            "label": "Nome do Banco",
            "name": "nome_banco",
            "sortable": "false"
        },
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_2",
            "label": "Created By Name",
            "name": "createdByName",
            "sortable": "false"
        }
    ],
    "considerFilterWhenGetTotal": "",
    "description": "",
    "disableResponsive": "",
    "filters": [],
    "hidePageSize": "",
    "id": "cenas",
    "name": "Processos Temporários",
    "order": "",
    "orderBy": "",
    "pageSize": "0",
    "pageSizeSelectorOptions": "10,20,30,40,50,100",
    "responsiveView": [
        {
            "breakpoint": "",
            "columns": "",
            "view": "Mobile"
        },
        {
            "breakpoint": "",
            "columns": "",
            "view": "Tablet"
        }
    ],
    "rowActions": [],
    "searchPopup": "",
    "showDataWhenFilterSet": "",
    "showPageSizeSelector": "true",
    "useSession": ""
}