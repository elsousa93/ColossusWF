{
    "actions": [{
        "className": "org.joget.plugin.enterprise.BeanShellDatalistAction",
        "icon": "<i class=\"fas fa-code\"><\/i>",
        "id": "action_0",
        "label": "Bean Shell",
        "name": "Bean Shell Datalist Action",
        "properties": {
            "confirmation": "",
            "datalist_type": "action",
            "label": "Começar processo",
            "script": "import org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.app.service.AppService;\r\nimport org.joget.apps.app.model.AppDefinition;\r\nimport org.joget.workflow.model.service.WorkflowManager;\r\nimport org.joget.workflow.model.WorkflowAssignment;\r\nimport org.joget.workflow.model.WorkflowProcess;\r\nimport org.joget.workflow.model.WorkflowProcessResult;\r\nimport org.joget.workflow.util.WorkflowUtil;\r\nimport org.joget.commons.util.LogUtil;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.ResultSetMetaData;\r\nimport java.sql.SQLException;\r\nimport javax.sql.DataSource;\r\n  \r\nAppDefinition appDef = AppUtil.getCurrentAppDefinition();\r\n\r\n//define process to start\r\nString processDefKey = \"CHGlobal\";\r\n\r\n//utility bean\r\nWorkflowManager workflowManager = (WorkflowManager) AppUtil.getApplicationContext().getBean(\"workflowManager\");\r\nAppService appService = (AppService) AppUtil.getApplicationContext().getBean(\"appService\");\r\n \r\n//get processDefId\r\nWorkflowProcess processDef = appService.getWorkflowProcessForApp(appDef.getId(), appDef.getVersion().toString(), processDefKey);\r\nString processDefId = processDef.getId();\r\n\r\nConnection con = null;\r\n\r\ntry{\r\n    // retrieve connection from the default datasource\r\n    DataSource ds = (DataSource)AppUtil.getApplicationContext().getBean(\"setupDataSource\");\r\n    con = ds.getConnection();  \r\n} catch(Exception e){\r\n    LogUtil.error(appDef.toString(), e, \"Error connecting to the DB \");\r\n}\r\n\r\ntry{\r\n    // executa queries ah BD\r\n    if(!con.isClosed()) {\r\n        for (String key : rowKeys) {\r\n            Boolean exists = false;\r\n            String n_wf_banco;\r\n            \r\n            try{\r\n                LogUtil.info(datalist.toString(), \"Record key is \" + key);\r\n                PreparedStatement stmt = con.prepareStatement(\"SELECT * FROM app_fd_processos_temp WHERE id = ?\");\r\n                stmt.setObject(1, key);\r\n                ResultSet rs = stmt.executeQuery();            \r\n                ResultSetMetaData rsmd = rs.getMetaData();\r\n                \r\n                int columnsNumber = rsmd.getColumnCount();\r\n                String[][] colValue = new String[2][columnsNumber];\r\n                \r\n                \r\n                while (rs.next()) {\r\n                    for (int i = 1; i <= columnsNumber; i++) {\r\n                        colValue[0][i-1] = rsmd.getColumnName(i);\r\n                        colValue[1][i-1] = rs.getString(i);\r\n                        n_wf_banco = rs.getString(\"n_wf_banco\");\r\n                    }\r\n                }\r\n                \r\n            }catch(Throwable e){\r\n                LogUtil.error(appDef.toString(), e, \"Error on the first query\");\r\n            }\r\n            \r\n            try{\r\n                stmt = con.prepareStatement(\"SELECT * FROM app_fd_processos p JOIN app_fd_detalhe_processo dp ON dp.id = p.c_detalhe_processo WHERE dp.n_wf_banco = ?\");\r\n                stmt.setObject(1, n_wf_banco);\r\n                rs = stmt.executeQuery();\r\n                if (rs.next()) {\r\n                    exists = true;\r\n                }\r\n            }catch(Throwable e){\r\n                LogUtil.error(appDef.toString(), e, \"Error on the second query\");\r\n            }\r\n            try{\r\n                //Inicia processo\r\n                if(!exists){ \r\n                    LogUtil.info(appDef.toString(), \"Processing Record \" + key + \" - n_wf_banco: \" + rs.toString(\"n_wf_banco\"));\r\n        \t\t    Map variables = new HashMap();\r\n        \t\t    //variables.put(\"batch\", batchId);\r\n        \t\t    String username = \"#currentUser.username#\";\r\n        \t\t    username = AppUtil.processHashVariable(username,null,null,null);\r\n        \t\t    \r\n        \t\t    WorkflowProcessResult result = workflowManager.processStart(processDefId, null, variables, username);\r\n                    LogUtil.info(appDef.toString(), \"Processing Batch \" + key + \" - Record: \" + rs.getObject(\"id\") + \" - Status: \" + result.getProcess().getInstanceId());\r\n                    \r\n                    //storeUsingJDBC(String[][] colValue, String idProcesso);\r\n                }\r\n            }catch(Throwable e){\r\n                LogUtil.error(appDef.toString(), e, \"Error in creating new process for record \" + key);\r\n            }\r\n                \r\n            \r\n            \r\n        }\r\n    }  \r\n}catch(Throwable e){\r\n    LogUtil.error(appDef.toString(), e, \"Error in loop);\r\n}\r\n\r\n\r\ntry {\r\n    if(con != null) {\r\n        con.close();\r\n        LogUtil.info(appDef.toString(), \"closing DB\"); \r\n    }\r\n} catch(Exception e) {\r\n    LogUtil.error(appDef.toString(), e, \"Error closing connection \");\r\n}\r\n"
        },
        "type": "text"
    }],
    "binder": {
        "className": "org.joget.plugin.enterprise.AdvancedFormRowDataListBinder",
        "properties": {
            "customSelectionValue": "",
            "extraCondition": "",
            "filters": [],
            "formDefId": "importaProcesso",
            "functionColumns": [],
            "groupBy": "",
            "joins": []
        }
    },
    "buttonPosition": "bottomLeft",
    "checkboxPosition": "left",
    "columns": [
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_0",
            "label": "Número Workflow Banco",
            "name": "n_wf_banco",
            "sortable": "false"
        },
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_1",
            "label": "Nome do Banco",
            "name": "nome_banco",
            "sortable": "false"
        },
        {
            "filterable": true,
            "hidden": "false",
            "id": "column_2",
            "label": "Created By Name",
            "name": "createdByName",
            "sortable": "false"
        }
    ],
    "considerFilterWhenGetTotal": "",
    "description": "",
    "disableResponsive": "",
    "filters": [],
    "hidePageSize": "",
    "id": "cenas",
    "name": "Processos Temporários",
    "order": "",
    "orderBy": "",
    "pageSize": "0",
    "pageSizeSelectorOptions": "10,20,30,40,50,100",
    "responsiveView": [
        {
            "breakpoint": "",
            "columns": "",
            "view": "Mobile"
        },
        {
            "breakpoint": "",
            "columns": "",
            "view": "Tablet"
        }
    ],
    "rowActions": [],
    "searchPopup": "",
    "showDataWhenFilterSet": "",
    "showPageSizeSelector": "true",
    "useSession": ""
}